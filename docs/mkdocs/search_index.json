{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to MAVROS_Tutorial\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \nhttps://github.com/masoudir/mavros_tutorial\n\n\nC++ Examples on Github:\n \nhttps://github.com/masoudir/mavros_cpp_examples\n\n\nPython Examples on Github:\n \nhttps://github.com/masoudir/mavros_python_examples\n\n\nWeb Page:\n \nhttps://masoudir.github.io/mavros_tutorial/\n\n\nIntroduction\n\n\nThis project illustrates some examples about simulating robots via Ardupilot-SITL using python and C++ languages and \nMAVROS (MAV-link protocol for Robotic Operating System).\n\n\nInstall Requirements\n\n\nInstall some requirements\n\n\nJust follow this command:\n\n\n\n\nsudo apt-get install python3-dev python3-pip python3-rospkg\n - Installs python3 and pip3.\n\n\n\n\nInstall Ardupilot-SITL\n\n\nreference : \nhttps://ardupilot.org/dev/docs/building-setup-linux.html\n\n\nInstall MAVProxy \n(Auxiliary)\n\n\nI prefer to use external proxy if I needed for MAVlink protocol. MAVProxy can forward any MAVLink messages from input to other TCP/UDP/Serial ports. It would be helpful if you are using one vehicle for two or more GCS or controller nodes. To install just use this command:\n\n\n\n\npip3 install MAVProxy\n - Install MAVProxy\n\n\n\n\nInstall ROS\n\n\nROS is semi-Operating System for robots. ROS is generally available for many programming languages such as C++, Python, \nJavascript and etc. It's free and easy to use. Until now there are three supported versions of ROS (kinetic, melodic and\nneotic) and I prefer to use melodic in this document. To install ROS-melodic, there are two ways of installing from \nready-built binary files or installing from source. I prefer to install the full-version of ros-melodic. If you are not \nusing ubuntu, it's likely to face some problems in installing ROS from binary files mentioned in ROS tutorials from \nsource, because its procedure is common for any kinds of linux platforms.\n\n\nFor install ROS-melodic from source you can refer to this \nlink\n.\n\n\nFor install ROS-melodic from binary files you can refer to this \nlink\n.\n\n\nInstall MAVROS\n\n\nIf you want to have installed ROS from binary files, this is recommended to install MAVROS from binary files too. \n\n\nInstall MAVROS from binary files\n\n\nFor this, you can refer to this \nlink\n.\n\n\nFor case of ease, the commands to be executed for installing MAVROS from binary files are as below:\n\n\nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nchmod a+x install_geographiclib_datasets.sh\n./install_geographiclib_datasets.sh\n\n\n\nInstall MAVROS from source\n\n\nIf you are not using ubuntu, this is strongly recommended to install MAVROS from source due to the similarity between \nvarious Linux distributions. You can refer to this \nlink\n \nfor full documentation. But here is the abstract commands:\n\n\n\n\n\n\nsource <ROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n) \n\n\n\n\n\n\nroscore\n - Brings up ros core for accessing its functions and built packages\n\n\n\n\n\n\nsudo apt-get install python-catkin-tools python-rosinstall-generator -y\n - Installs python packages related to ros\n\n\n\n\n\n\ncd ~/my_catkin_ws/src\n - Jump to catkin src folder\n\n\n\n\n\n\ngit clone https://github.com/ros-geographic-info/unique_identifier.git\n - clone unique_identifier package\n\n\n\n\n\n\ngit clone https://github.com/ros-geographic-info/geographic_info.git\n - clone geographic_info package\n\n\n\n\n\n\ncd ~/my_catkin_ws\n - Jump to catkin folder\n\n\n\n\n\n\ncatkin init\n - Initialize catkin workspace\n\n\n\n\n\n\nwstool init src\n - Initialize ros package installer\n\n\n\n\n\n\nrosinstall_generator --rosdistro melodic mavlink | tee /tmp/mavros.rosinstall\n - Install MAVLink (we use the melodic reference for all ROS distros as it's not distro-specific and up to date)\n\n\n\n\n\n\nrosinstall_generator --upstream mavros | tee -a /tmp/mavros.rosinstall\n - Install MAVROS: get source (upstream - released)\n\n\n\n\n\n\nwstool merge -t src /tmp/mavros.rosinstall\n - Create workspace & deps\n\n\n\n\n\n\nwstool update -t src -j4\n - Builds the ros workspace\n\n\n\n\n\n\nrosdep install --from-paths src --ignore-src -y\n - Install packages for ros\n\n\n\n\n\n\n./src/mavros/mavros/scripts/install_geographiclib_datasets.sh\n - Install GeographicLib datasets\n\n\n\n\n\n\ncatkin build\n - Build source\n\n\n\n\n\n\nsource devel/setup.bash\n - Uses setup.bash or setup.zsh from workspace so that rosrun can find nodes from this workspace\n\n\n\n\n\n\nFor installing MAVROS from binary packages please refer to \nhttps://ardupilot.org/dev/docs/ros-install.html#installing-mavros\n.\n\n\nIgnite Rover robot\n\n\nBringing up Ardupilot-SITL for Rover\n\n\n\n\n\n\ncd <Your_Ardupilot_Instalation_Folder>/ardupilot/Tools/autotest/\n - Jump to ardupilot folder\n\n\n\n\n\n\npython3 sim_vehicle.py -v Rover\n - Start Rover vehicle\n\n\n\n\n\n\nNote that if you want to show other SITL modules such as map or console, you can use these commands:\n\n\npython3 sim_vehicle.py -v Rover --map --console\n\n\n\nOr alternatively you can mention them inside SITL terminal:\n\n\nmodule load map\n\nmodule load console\n\n\n\nNote: Please be patient when ardupilot is compiling robots at first time. This takes 2-3 minutes to complete.\n\n\nYou can see that ardupilot-sitl created some outputs such as \"127.0.0.1:14550\" \"127.0.0.1:14551\". These are auxiliary UDP ports for communicating this vehicle to another MAVProxy console. We use these ports in examples.    \n\n\nConnect Rover to MAVROS\n\n\nAt first you have to source ROS and MAVROS. If you have installed them from binary files, follow these commands:\n\n\n\n\nsource /opt/ros/melodic/setup.bash\n - Defines the installed folder of ROS and MAVROS\n\n\n\n\nOr if you have installed them from source, follow these commands:\n\n\n\n\n\n\nsource <ROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nsource <MAVROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of MAVROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nThen it is the time for bringing up the core of ros:\n\n\n\n\nroscore\n - Brings up ros core for accessing its functions and built packages\n\n\n\n\nAfterwards, you have to tell the MAVROS how to find the vehicle you are using it:\n\n\n\n\nroslaunch mavros apm.launch fcu_url:=udp://:14550@\n - Connects vehicle from UDP:14550 port to MAVROS\n\n\n\n\nOr if you want to connect to your robot via TCP port remotely, you can use this command\n\n\n\n\nroslaunch mavros apm.launch fcu_url:=tcp://<REMOTE_HOST>:<TCP_PORT>@\n - Connects vehicle from REMOTE_HOST:TCP_PORT port to MAVROS\n\n\n\n\nView ROS topics\n\n\n\n\n\n\nsource <ROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of ROS (You can insert this command at the \nbottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nrqt\n - Executes ROS plugin monitoring window\n\n\n\n\n\n\nThen in rqt window shown, you have to select from \"Plugins\" > \"Topics\" > \"Topic Monitor\" to stat topic monitoring. This \nwill show you the bottom figure:\n\n\n\n\nYou can tick any of the topic shown and monitor its contents. But in my own experience, I think that it's better to use commands in terminal or write them down in your scripts (bash, C++, python and ...)",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-mavros_tutorial",
            "text": "Author:  Masoud Iranmehr  Github Page:   https://github.com/masoudir/mavros_tutorial  C++ Examples on Github:   https://github.com/masoudir/mavros_cpp_examples  Python Examples on Github:   https://github.com/masoudir/mavros_python_examples  Web Page:   https://masoudir.github.io/mavros_tutorial/",
            "title": "Welcome to MAVROS_Tutorial"
        },
        {
            "location": "/#introduction",
            "text": "This project illustrates some examples about simulating robots via Ardupilot-SITL using python and C++ languages and \nMAVROS (MAV-link protocol for Robotic Operating System).",
            "title": "Introduction"
        },
        {
            "location": "/#install-requirements",
            "text": "",
            "title": "Install Requirements"
        },
        {
            "location": "/#install-some-requirements",
            "text": "Just follow this command:   sudo apt-get install python3-dev python3-pip python3-rospkg  - Installs python3 and pip3.",
            "title": "Install some requirements"
        },
        {
            "location": "/#install-ardupilot-sitl",
            "text": "reference :  https://ardupilot.org/dev/docs/building-setup-linux.html",
            "title": "Install Ardupilot-SITL"
        },
        {
            "location": "/#install-mavproxy-auxiliary",
            "text": "I prefer to use external proxy if I needed for MAVlink protocol. MAVProxy can forward any MAVLink messages from input to other TCP/UDP/Serial ports. It would be helpful if you are using one vehicle for two or more GCS or controller nodes. To install just use this command:   pip3 install MAVProxy  - Install MAVProxy",
            "title": "Install MAVProxy (Auxiliary)"
        },
        {
            "location": "/#install-ros",
            "text": "ROS is semi-Operating System for robots. ROS is generally available for many programming languages such as C++, Python, \nJavascript and etc. It's free and easy to use. Until now there are three supported versions of ROS (kinetic, melodic and\nneotic) and I prefer to use melodic in this document. To install ROS-melodic, there are two ways of installing from \nready-built binary files or installing from source. I prefer to install the full-version of ros-melodic. If you are not \nusing ubuntu, it's likely to face some problems in installing ROS from binary files mentioned in ROS tutorials from \nsource, because its procedure is common for any kinds of linux platforms.  For install ROS-melodic from source you can refer to this  link .  For install ROS-melodic from binary files you can refer to this  link .",
            "title": "Install ROS"
        },
        {
            "location": "/#install-mavros",
            "text": "If you want to have installed ROS from binary files, this is recommended to install MAVROS from binary files too.",
            "title": "Install MAVROS"
        },
        {
            "location": "/#install-mavros-from-binary-files",
            "text": "For this, you can refer to this  link .  For case of ease, the commands to be executed for installing MAVROS from binary files are as below:  sudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nchmod a+x install_geographiclib_datasets.sh\n./install_geographiclib_datasets.sh",
            "title": "Install MAVROS from binary files"
        },
        {
            "location": "/#install-mavros-from-source",
            "text": "If you are not using ubuntu, this is strongly recommended to install MAVROS from source due to the similarity between \nvarious Linux distributions. You can refer to this  link  \nfor full documentation. But here is the abstract commands:    source <ROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )     roscore  - Brings up ros core for accessing its functions and built packages    sudo apt-get install python-catkin-tools python-rosinstall-generator -y  - Installs python packages related to ros    cd ~/my_catkin_ws/src  - Jump to catkin src folder    git clone https://github.com/ros-geographic-info/unique_identifier.git  - clone unique_identifier package    git clone https://github.com/ros-geographic-info/geographic_info.git  - clone geographic_info package    cd ~/my_catkin_ws  - Jump to catkin folder    catkin init  - Initialize catkin workspace    wstool init src  - Initialize ros package installer    rosinstall_generator --rosdistro melodic mavlink | tee /tmp/mavros.rosinstall  - Install MAVLink (we use the melodic reference for all ROS distros as it's not distro-specific and up to date)    rosinstall_generator --upstream mavros | tee -a /tmp/mavros.rosinstall  - Install MAVROS: get source (upstream - released)    wstool merge -t src /tmp/mavros.rosinstall  - Create workspace & deps    wstool update -t src -j4  - Builds the ros workspace    rosdep install --from-paths src --ignore-src -y  - Install packages for ros    ./src/mavros/mavros/scripts/install_geographiclib_datasets.sh  - Install GeographicLib datasets    catkin build  - Build source    source devel/setup.bash  - Uses setup.bash or setup.zsh from workspace so that rosrun can find nodes from this workspace    For installing MAVROS from binary packages please refer to  https://ardupilot.org/dev/docs/ros-install.html#installing-mavros .",
            "title": "Install MAVROS from source"
        },
        {
            "location": "/#ignite-rover-robot",
            "text": "",
            "title": "Ignite Rover robot"
        },
        {
            "location": "/#bringing-up-ardupilot-sitl-for-rover",
            "text": "cd <Your_Ardupilot_Instalation_Folder>/ardupilot/Tools/autotest/  - Jump to ardupilot folder    python3 sim_vehicle.py -v Rover  - Start Rover vehicle    Note that if you want to show other SITL modules such as map or console, you can use these commands:  python3 sim_vehicle.py -v Rover --map --console  Or alternatively you can mention them inside SITL terminal:  module load map\n\nmodule load console  Note: Please be patient when ardupilot is compiling robots at first time. This takes 2-3 minutes to complete.  You can see that ardupilot-sitl created some outputs such as \"127.0.0.1:14550\" \"127.0.0.1:14551\". These are auxiliary UDP ports for communicating this vehicle to another MAVProxy console. We use these ports in examples.",
            "title": "Bringing up Ardupilot-SITL for Rover"
        },
        {
            "location": "/#connect-rover-to-mavros",
            "text": "At first you have to source ROS and MAVROS. If you have installed them from binary files, follow these commands:   source /opt/ros/melodic/setup.bash  - Defines the installed folder of ROS and MAVROS   Or if you have installed them from source, follow these commands:    source <ROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    source <MAVROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of MAVROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    Then it is the time for bringing up the core of ros:   roscore  - Brings up ros core for accessing its functions and built packages   Afterwards, you have to tell the MAVROS how to find the vehicle you are using it:   roslaunch mavros apm.launch fcu_url:=udp://:14550@  - Connects vehicle from UDP:14550 port to MAVROS   Or if you want to connect to your robot via TCP port remotely, you can use this command   roslaunch mavros apm.launch fcu_url:=tcp://<REMOTE_HOST>:<TCP_PORT>@  - Connects vehicle from REMOTE_HOST:TCP_PORT port to MAVROS",
            "title": "Connect Rover to MAVROS"
        },
        {
            "location": "/#view-ros-topics",
            "text": "source <ROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of ROS (You can insert this command at the \nbottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    rqt  - Executes ROS plugin monitoring window    Then in rqt window shown, you have to select from \"Plugins\" > \"Topics\" > \"Topic Monitor\" to stat topic monitoring. This \nwill show you the bottom figure:   You can tick any of the topic shown and monitor its contents. But in my own experience, I think that it's better to use commands in terminal or write them down in your scripts (bash, C++, python and ...)",
            "title": "View ROS topics"
        },
        {
            "location": "/about/",
            "text": "Masoud Iranmehr\n\n\nMy Bio\n\n\nI was born in Sari, Mazandaran, Iran. I am graduated in Master of science in Electronics in Sharif University, Tehran, Iran.\n\n\nMy Interests\n\n\nI am mostly interested in \n(Linux/Arm) Embedded Systems\n and also \nRobotics\n and among all of methods has been designed, I love ROS (Robotic Operating System), because it's very easy to use and we can use this via many programming languages such as C++, Python, Javascript and etc.\nAlso I found that Ardupilot is a very professional open source package for driving so many kinds of robots such as Planes, Copters and Rovers. So I decided to use this tool for driving simple robots and also using ROS for controlling it.\n\n\nAlso I am an expert in using ARM Micro-Controllers (STM32) in robotics and I am able to communicate directly between these kind of processors and ROS. This could be used to design simple robots under ROS functions.\n\n\nI am here to share my Robotics knowledge to everybody. If you are interested in my example packages and its docuemnts, do not hesitate to join in my git repository and be a contributer.  \n\n\nYou can directly ask me about my packages for free via one of these methods:\n\n\nEmail address: \nmasoud.iranmehr@gmail.com\n\n\nYours Sincreley,\n\n\nMasoud Iranmehr",
            "title": "About"
        },
        {
            "location": "/about/#masoud-iranmehr",
            "text": "",
            "title": "Masoud Iranmehr"
        },
        {
            "location": "/about/#my-bio",
            "text": "I was born in Sari, Mazandaran, Iran. I am graduated in Master of science in Electronics in Sharif University, Tehran, Iran.",
            "title": "My Bio"
        },
        {
            "location": "/about/#my-interests",
            "text": "I am mostly interested in  (Linux/Arm) Embedded Systems  and also  Robotics  and among all of methods has been designed, I love ROS (Robotic Operating System), because it's very easy to use and we can use this via many programming languages such as C++, Python, Javascript and etc.\nAlso I found that Ardupilot is a very professional open source package for driving so many kinds of robots such as Planes, Copters and Rovers. So I decided to use this tool for driving simple robots and also using ROS for controlling it.  Also I am an expert in using ARM Micro-Controllers (STM32) in robotics and I am able to communicate directly between these kind of processors and ROS. This could be used to design simple robots under ROS functions.  I am here to share my Robotics knowledge to everybody. If you are interested in my example packages and its docuemnts, do not hesitate to join in my git repository and be a contributer.    You can directly ask me about my packages for free via one of these methods:  Email address:  masoud.iranmehr@gmail.com  Yours Sincreley,  Masoud Iranmehr",
            "title": "My Interests"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/",
            "text": "How to Arm and Disarm Ardupilot-SITL Rover in MAVROS\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n\n\nArm and Disarm\n\n\nArm and Disarm using MAVProxy or Ardupilot-SITL\n\n\nYou can send your commands directly from your terminal provided by MAVProxy or SITL. For this just type this command:\n\n\n\n\n\n\narm throttle\n - Arms the robot\n\n\n\n\n\n\ndisarm\n - Disarms the robot\n\n\n\n\n\n\nArm and Disarm using ROS rqt\n\n\nAt first you need to Add two plugin from rqt:\n\n\nPlugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller\n\n\n\nThen in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".\n\n\nThen in \"Service Caller\" side, you have to select \"/mavros/cmd/arming\" and then in the field of \"value\", you can set\nyour arm status as a bool type variable (False/ True).  Then click on \"call\" button to send this message. The result should be as follow:\n\n\n\n\nArm and Disarm using ROS commands lines\n\n\nMonitoring Rover general status (Arm status and Mode name)\n\n\nIf you want to view the general status of your ardupilot robot in MAVROS, you have to know all the topics created by MAVROS:\n\n\n\n\nrostopic list\n - Returns all topics available\n\n\n\n\nThen you can see that every part of your robot has been mapped to a specific topic. In order to show robot arming status, you must use \"/mavros/state\" topic:\n\n\n\n\nrostopic echo /mavros/state\n - Returns all contents of /mavros/state topic periodically\n\n\n\n\nThe results should be as similar as this:\n\n\n---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---\n\n\n\nThe command \"rostopic echo \n\" will return all the contents of the topic every one second. In this case, \n\"connected\" field shows you that your MAVROS is still connected to the robot. Also \"mode\" shows you the name of vehicle \nmode at that time.\n\n\nSend Arm/Disarm command to robot\n\n\nJust follow these commands:\n\n\n\n\n\n\nrosservice call /mavros/cmd/arming True\n - Send Arm command to robot\n\n\n\n\n\n\nrosservice call /mavros/cmd/arming False\n - Send Disarm command to robot\n\n\n\n\n\n\nAnother method is to use \"rosrun\" command:\n\n\n\n\n\n\nrosrun mavros mavsafety arm\n - Send Arm command to robot\n\n\n\n\n\n\nrosrun mavros mavsafety disarm\n - Send Disarm command to robot",
            "title": "Step1 How to Arm and Disarm"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/#how-to-arm-and-disarm-ardupilot-sitl-rover-in-mavros",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to Arm and Disarm Ardupilot-SITL Rover in MAVROS"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/#initialize",
            "text": "Please follow steps mentioned in this  link",
            "title": "Initialize"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/#arm-and-disarm",
            "text": "",
            "title": "Arm and Disarm"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/#arm-and-disarm-using-mavproxy-or-ardupilot-sitl",
            "text": "You can send your commands directly from your terminal provided by MAVProxy or SITL. For this just type this command:    arm throttle  - Arms the robot    disarm  - Disarms the robot",
            "title": "Arm and Disarm using MAVProxy or Ardupilot-SITL"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/#arm-and-disarm-using-ros-rqt",
            "text": "At first you need to Add two plugin from rqt:  Plugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller  Then in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".  Then in \"Service Caller\" side, you have to select \"/mavros/cmd/arming\" and then in the field of \"value\", you can set\nyour arm status as a bool type variable (False/ True).  Then click on \"call\" button to send this message. The result should be as follow:",
            "title": "Arm and Disarm using ROS rqt"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/#arm-and-disarm-using-ros-commands-lines",
            "text": "",
            "title": "Arm and Disarm using ROS commands lines"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/#monitoring-rover-general-status-arm-status-and-mode-name",
            "text": "If you want to view the general status of your ardupilot robot in MAVROS, you have to know all the topics created by MAVROS:   rostopic list  - Returns all topics available   Then you can see that every part of your robot has been mapped to a specific topic. In order to show robot arming status, you must use \"/mavros/state\" topic:   rostopic echo /mavros/state  - Returns all contents of /mavros/state topic periodically   The results should be as similar as this:  ---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---  The command \"rostopic echo  \" will return all the contents of the topic every one second. In this case, \n\"connected\" field shows you that your MAVROS is still connected to the robot. Also \"mode\" shows you the name of vehicle \nmode at that time.",
            "title": "Monitoring Rover general status (Arm status and Mode name)"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_Arm_and_Disarm/#send-armdisarm-command-to-robot",
            "text": "Just follow these commands:    rosservice call /mavros/cmd/arming True  - Send Arm command to robot    rosservice call /mavros/cmd/arming False  - Send Disarm command to robot    Another method is to use \"rosrun\" command:    rosrun mavros mavsafety arm  - Send Arm command to robot    rosrun mavros mavsafety disarm  - Send Disarm command to robot",
            "title": "Send Arm/Disarm command to robot"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/",
            "text": "How to change mode of Ardupilot-SITL Rover in MAVROS\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n\n\nChange vehicle mode\n\n\nChange vehicle mode using MAVProxy or Ardupilot-SITL\n\n\nGet mode\n\n\nIf you want to see the last mode of vehicle, you can just looking for the name before \">\" character in these terminals.\n\n\nSet mode\n\n\nAlso if you want to change the mode, you can send your commands directly from your terminal provided by MAVProxy or SITL. For example if you want to change vehicle mode to \n\"GUIDED\"\n, you can type this command:\n\n\n\n\nGUIDED\n - Change mode to GUIDED\n\n\n\n\nAlso you can view all of available modes for your vehicle via this command:\n\n\n\n\nmode\n - Shows all available modes\n\n\n\n\nChange vehicle mode using ROS rqt:\n\n\nAt first you need to Add two plugin from rqt:\n\n\nPlugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller\n\n\n\nThen in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".\n\n\nThen in \"Service Caller\" side, you have to select \"/mavros/set_mode\" and then in the field of \"custom_mode\", you can set\nyour vehicle mode. Then click on \"call\" button to send this message. The result should be as follow:\n\n\n\n\nChange vehicle mode using ROS command lines\n\n\nGet mode\n\n\nIf you want to see the last mode of the vehicle, you can just type this command:\n\n\n\n\nrostopic echo /mavros/state\n - Returns all contents of /mavros/state topic periodically\n\n\n\n\nThe results should be as similar as this:\n\n\n---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---\n\n\n\nYou can find the mode in the field of \"mode\" of the result shown.\n\n\nSet mode\n\n\nYou need to call a ros service in order to do that. Just follow these commands:\n\n\n\n\nrosservice info /mavros/set_mode\n - To see its arguments and type of its Class Message\n\n\n\n\nThis command gives you this result:\n\n\nNode: /mavros\nURI: rosrpc://ubuntu:42571\nType: mavros_msgs/SetMode\nArgs: base_mode custom_mode\n\n\n\n\"mavros_msgs/SetMode\" is the type of this service srv file and \"Args\" are our input arguments, but we have to know their types, so that we type this command:\n\n\n\n\nrossrv show mavros_msgs/SetMode\n - Getting details of the mentioned srv file\n\n\n\n\nThis will result as below:\n\n\nuint8 MAV_MODE_PREFLIGHT=0\nuint8 MAV_MODE_STABILIZE_DISARMED=80\nuint8 MAV_MODE_STABILIZE_ARMED=208\nuint8 MAV_MODE_MANUAL_DISARMED=64\nuint8 MAV_MODE_MANUAL_ARMED=192\nuint8 MAV_MODE_GUIDED_DISARMED=88\nuint8 MAV_MODE_GUIDED_ARMED=216\nuint8 MAV_MODE_AUTO_DISARMED=92\nuint8 MAV_MODE_AUTO_ARMED=220\nuint8 MAV_MODE_TEST_DISARMED=66\nuint8 MAV_MODE_TEST_ARMED=194\nuint8 base_mode\nstring custom_mode\n---\nbool mode_sent\n\n\n\nIn this case, \"custom_mode\" is the parameter needs to being configured and its type is \"string\". For example if you want to change the vehicle \nmode to \"GUIDED\" follow this command:\n\n\n\n\nrosservice call /mavros/set_mode \"custom_mode: 'GUIDED'\"\n - Change vehicle mode to \"GUIDED\"\n\n\n\n\nAnother method is to use \"rosrun\" command:\n\n\n\n\n\n\nrosrun mavros mavsys mode -c MANUAL\n - If you want to change mode to \"MANUAL\"\n\n\n\n\n\n\nrosrun mavros mavsys mode -b <ENUM VALUE>\n - If you want to use \"base_mode\" to change mode",
            "title": "Step2 How to change mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#how-to-change-mode-of-ardupilot-sitl-rover-in-mavros",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to change mode of Ardupilot-SITL Rover in MAVROS"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#initialize",
            "text": "Please follow steps mentioned in this  link",
            "title": "Initialize"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#change-vehicle-mode",
            "text": "",
            "title": "Change vehicle mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#change-vehicle-mode-using-mavproxy-or-ardupilot-sitl",
            "text": "",
            "title": "Change vehicle mode using MAVProxy or Ardupilot-SITL"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#get-mode",
            "text": "If you want to see the last mode of vehicle, you can just looking for the name before \">\" character in these terminals.",
            "title": "Get mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#set-mode",
            "text": "Also if you want to change the mode, you can send your commands directly from your terminal provided by MAVProxy or SITL. For example if you want to change vehicle mode to  \"GUIDED\" , you can type this command:   GUIDED  - Change mode to GUIDED   Also you can view all of available modes for your vehicle via this command:   mode  - Shows all available modes",
            "title": "Set mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#change-vehicle-mode-using-ros-rqt",
            "text": "At first you need to Add two plugin from rqt:  Plugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller  Then in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".  Then in \"Service Caller\" side, you have to select \"/mavros/set_mode\" and then in the field of \"custom_mode\", you can set\nyour vehicle mode. Then click on \"call\" button to send this message. The result should be as follow:",
            "title": "Change vehicle mode using ROS rqt:"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#change-vehicle-mode-using-ros-command-lines",
            "text": "",
            "title": "Change vehicle mode using ROS command lines"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#get-mode_1",
            "text": "If you want to see the last mode of the vehicle, you can just type this command:   rostopic echo /mavros/state  - Returns all contents of /mavros/state topic periodically   The results should be as similar as this:  ---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---  You can find the mode in the field of \"mode\" of the result shown.",
            "title": "Get mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_change_mode/#set-mode_1",
            "text": "You need to call a ros service in order to do that. Just follow these commands:   rosservice info /mavros/set_mode  - To see its arguments and type of its Class Message   This command gives you this result:  Node: /mavros\nURI: rosrpc://ubuntu:42571\nType: mavros_msgs/SetMode\nArgs: base_mode custom_mode  \"mavros_msgs/SetMode\" is the type of this service srv file and \"Args\" are our input arguments, but we have to know their types, so that we type this command:   rossrv show mavros_msgs/SetMode  - Getting details of the mentioned srv file   This will result as below:  uint8 MAV_MODE_PREFLIGHT=0\nuint8 MAV_MODE_STABILIZE_DISARMED=80\nuint8 MAV_MODE_STABILIZE_ARMED=208\nuint8 MAV_MODE_MANUAL_DISARMED=64\nuint8 MAV_MODE_MANUAL_ARMED=192\nuint8 MAV_MODE_GUIDED_DISARMED=88\nuint8 MAV_MODE_GUIDED_ARMED=216\nuint8 MAV_MODE_AUTO_DISARMED=92\nuint8 MAV_MODE_AUTO_ARMED=220\nuint8 MAV_MODE_TEST_DISARMED=66\nuint8 MAV_MODE_TEST_ARMED=194\nuint8 base_mode\nstring custom_mode\n---\nbool mode_sent  In this case, \"custom_mode\" is the parameter needs to being configured and its type is \"string\". For example if you want to change the vehicle \nmode to \"GUIDED\" follow this command:   rosservice call /mavros/set_mode \"custom_mode: 'GUIDED'\"  - Change vehicle mode to \"GUIDED\"   Another method is to use \"rosrun\" command:    rosrun mavros mavsys mode -c MANUAL  - If you want to change mode to \"MANUAL\"    rosrun mavros mavsys mode -b <ENUM VALUE>  - If you want to use \"base_mode\" to change mode",
            "title": "Set mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/",
            "text": "How to move Ardupilot-SITL Rover in MAVROS\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n\n\nThen follow the steps in this \nlink\n to Arm your vehicle.\n\n\nExecute GOTO in vehicle\n\n\nExecute GOTO with MAVProxy commands:\n\n\nHow to make vehicle move\n\n\nYou can use this command for forcing vehicle to move:\n\n\n\n\nGUIDED LAT LON ALTITUDE\n - Changes the mode to GUIDED and force vehicle to move to the point of (LAT, LON, ALT)\n\n\n\n\nHow to stop vehicle\n\n\nYou can use this command for forcing vehicle to move:\n\n\n\n\nhold\n - Stops vehicle from moving\n\n\n\n\nOr\n\n\n\n\nmode hold\n - Stops vehicle from moving\n\n\n\n\nFor reverse, you have to change mode to \n\"GUIDED\"\n:\n\n\n\n\nmode guided\n - Stops vehicle from moving\n\n\n\n\n////\n\n\nChange vehicle mode using ROS rqt:\n\n\nAt first you need to Add two plugin from rqt:\n\n\nPlugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller\n\n\n\nThen in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".\n\n\nThen in \"Service Caller\" side, you have to select \"/mavros/set_mode\" and then in the field of \"custom_mode\", you can set\nyour vehicle mode. Then click on \"call\" button to send this message. The result should be as follow:\n\n\n\n\nChange vehicle mode using ROS command lines\n\n\nGet mode\n\n\nIf you want to see the last mode of the vehicle, you can just type this command:\n\n\n\n\nrostopic echo /mavros/state\n - Returns all contents of /mavros/state topic periodically\n\n\n\n\nThe results should be as similar as this:\n\n\n---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---\n\n\n\nYou can find the mode in the field of \"mode\" of the result shown.\n\n\nSet mode\n\n\nYou need to call a ros service in order to do that. Just follow these commands:\n\n\n\n\nrosservice info /mavros/set_mode\n - To see its arguments and type of its Class Message\n\n\n\n\nThis command gives you this result:\n\n\nNode: /mavros\nURI: rosrpc://ubuntu:42571\nType: mavros_msgs/SetMode\nArgs: base_mode custom_mode\n\n\n\n\"mavros_msgs/SetMode\" is the type of this service srv file and \"Args\" are our input arguments, but we have to know their types, so that we type this command:\n\n\n\n\nrossrv show mavros_msgs/SetMode\n - Getting details of the mentioned srv file\n\n\n\n\nThis will result as below:\n\n\nuint8 MAV_MODE_PREFLIGHT=0\nuint8 MAV_MODE_STABILIZE_DISARMED=80\nuint8 MAV_MODE_STABILIZE_ARMED=208\nuint8 MAV_MODE_MANUAL_DISARMED=64\nuint8 MAV_MODE_MANUAL_ARMED=192\nuint8 MAV_MODE_GUIDED_DISARMED=88\nuint8 MAV_MODE_GUIDED_ARMED=216\nuint8 MAV_MODE_AUTO_DISARMED=92\nuint8 MAV_MODE_AUTO_ARMED=220\nuint8 MAV_MODE_TEST_DISARMED=66\nuint8 MAV_MODE_TEST_ARMED=194\nuint8 base_mode\nstring custom_mode\n---\nbool mode_sent\n\n\n\nIn this case, \"custom_mode\" is the parameter needs to being configured and its type is \"string\". For example if you want to change the vehicle \nmode to \"GUIDED\" follow this command:\n\n\n\n\nrosservice call /mavros/set_mode \"custom_mode: 'GUIDED'\"\n - Change vehicle mode to \"GUIDED\"\n\n\n\n\nAnother method is to use \"rosrun\" command:\n\n\n\n\n\n\nrosrun mavros mavsys mode -c MANUAL\n - If you want to change mode to \"MANUAL\"\n\n\n\n\n\n\nrosrun mavros mavsys mode -b <ENUM VALUE>\n - If you want to use \"base_mode\" to change mode",
            "title": "Step3 How to make move"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#how-to-move-ardupilot-sitl-rover-in-mavros",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to move Ardupilot-SITL Rover in MAVROS"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#initialize",
            "text": "Please follow steps mentioned in this  link  Then follow the steps in this  link  to Arm your vehicle.",
            "title": "Initialize"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#execute-goto-in-vehicle",
            "text": "",
            "title": "Execute GOTO in vehicle"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#execute-goto-with-mavproxy-commands",
            "text": "",
            "title": "Execute GOTO with MAVProxy commands:"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#how-to-make-vehicle-move",
            "text": "You can use this command for forcing vehicle to move:   GUIDED LAT LON ALTITUDE  - Changes the mode to GUIDED and force vehicle to move to the point of (LAT, LON, ALT)",
            "title": "How to make vehicle move"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#how-to-stop-vehicle",
            "text": "You can use this command for forcing vehicle to move:   hold  - Stops vehicle from moving   Or   mode hold  - Stops vehicle from moving   For reverse, you have to change mode to  \"GUIDED\" :   mode guided  - Stops vehicle from moving   ////",
            "title": "How to stop vehicle"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#change-vehicle-mode-using-ros-rqt",
            "text": "At first you need to Add two plugin from rqt:  Plugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller  Then in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".  Then in \"Service Caller\" side, you have to select \"/mavros/set_mode\" and then in the field of \"custom_mode\", you can set\nyour vehicle mode. Then click on \"call\" button to send this message. The result should be as follow:",
            "title": "Change vehicle mode using ROS rqt:"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#change-vehicle-mode-using-ros-command-lines",
            "text": "",
            "title": "Change vehicle mode using ROS command lines"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#get-mode",
            "text": "If you want to see the last mode of the vehicle, you can just type this command:   rostopic echo /mavros/state  - Returns all contents of /mavros/state topic periodically   The results should be as similar as this:  ---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---  You can find the mode in the field of \"mode\" of the result shown.",
            "title": "Get mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#set-mode",
            "text": "You need to call a ros service in order to do that. Just follow these commands:   rosservice info /mavros/set_mode  - To see its arguments and type of its Class Message   This command gives you this result:  Node: /mavros\nURI: rosrpc://ubuntu:42571\nType: mavros_msgs/SetMode\nArgs: base_mode custom_mode  \"mavros_msgs/SetMode\" is the type of this service srv file and \"Args\" are our input arguments, but we have to know their types, so that we type this command:   rossrv show mavros_msgs/SetMode  - Getting details of the mentioned srv file   This will result as below:  uint8 MAV_MODE_PREFLIGHT=0\nuint8 MAV_MODE_STABILIZE_DISARMED=80\nuint8 MAV_MODE_STABILIZE_ARMED=208\nuint8 MAV_MODE_MANUAL_DISARMED=64\nuint8 MAV_MODE_MANUAL_ARMED=192\nuint8 MAV_MODE_GUIDED_DISARMED=88\nuint8 MAV_MODE_GUIDED_ARMED=216\nuint8 MAV_MODE_AUTO_DISARMED=92\nuint8 MAV_MODE_AUTO_ARMED=220\nuint8 MAV_MODE_TEST_DISARMED=66\nuint8 MAV_MODE_TEST_ARMED=194\nuint8 base_mode\nstring custom_mode\n---\nbool mode_sent  In this case, \"custom_mode\" is the parameter needs to being configured and its type is \"string\". For example if you want to change the vehicle \nmode to \"GUIDED\" follow this command:   rosservice call /mavros/set_mode \"custom_mode: 'GUIDED'\"  - Change vehicle mode to \"GUIDED\"   Another method is to use \"rosrun\" command:    rosrun mavros mavsys mode -c MANUAL  - If you want to change mode to \"MANUAL\"    rosrun mavros mavsys mode -b <ENUM VALUE>  - If you want to use \"base_mode\" to change mode",
            "title": "Set mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/",
            "text": "How to Get/ Set parameters of Ardupilot-SITL Rover in MAVROS\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nIgnite your robot\n\n\nPlease follow steps mentioned in this \nlink",
            "title": "Step4 How to set and get parameters"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#how-to-get-set-parameters-of-ardupilot-sitl-rover-in-mavros",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to Get/ Set parameters of Ardupilot-SITL Rover in MAVROS"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#ignite-your-robot",
            "text": "Please follow steps mentioned in this  link",
            "title": "Ignite your robot"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/example1_Rover_ArmDisarmMove_Python/",
            "text": "How to Arm and Disarm Ardupilot-SITL Rover in MAVROS\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nYou just need to follow these steps (has been mentioned in \nQuick Start\n)\n\n\nBringing up Ardupilot-SITL for Rover\n\n\n\n\n\n\ncd <Your_Ardupilot_Instalation_Folder>/ardupilot/Tools/autotest/\n - Jump to ardupilot folder\n\n\n\n\n\n\npython3 sim_vehicle.py -v Rover\n - Start Rover vehicle\n\n\n\n\n\n\nNote that if you want to show other SITL modules such as map or console, you can use these commands:\n\n\npython3 sim_vehicle.py -v Rover --map --console\n\n\n\nOr alternatively you can mention them inside SITL terminal:\n\n\nmodule load map\n\nmodule load console\n\n\n\nNote: Please be patient when ardupilot is compiling robots at first time. This takes 2-3 minutes to complete.\n\n\nYou can see that ardupilot-sitl created some outputs such as \"127.0.0.1:14550\" \"127.0.0.1:14551\". These are auxiliary UDP ports for communicating this vehicle to another MAVProxy console. We use these ports in examples.    \n\n\nConnect Rover to MAVROS\n\n\n\n\n\n\nsource <ROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nsource <MAVROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of MAVROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nroscore\n - Brings up ros core for accessing its functions and built packages\n\n\n\n\n\n\nroslaunch mavros apm.launch fcu_url:=udp://:14550@\n - Connects vehicle from UDP:14550 port to MAVROS \n\n\n\n\n\n\nNote: In order to make this document more useful, I have assumed that you put sourcing commands described above on the \"`/.bashrc\" file to be executed automatically. So that I have eliminated sourcing commands from the next steps.\n\n\nArm and Disarm using Python\n\n\nGetting Arm and Disarm status\n\n\nIn the first step, we want to read the Arming status of our robot. For this, we have to use \"/mavros/state\" topic. To create connection to this topic, we have to get the type of this topic. For this, you can use this command:\n\n\n\n\nrostopic type /mavros/state\n - Shows the type of /mavros/state topic\n\n\n\n\nThe result should be as follows:\n\n\nmavros_msgs/State\n\n\n\nIn python we have access to \"mavros_msgs/State\" library from package \"mavros_msgs.msg\". After that we have to write a python Subscriber which runs as an \nevent_handler\n. The final code for reading Arming status would be:\n\n\nimport rospy\nimport mavros_msgs.msg\n\ndef callback(data):\n    print(\"all data is:\", data)\n    print(\"Robot Arm Status:\", data.armed)\n\n\ndef listener():\n    rospy.init_node('listener', anonymous=True)\n    rospy.Subscriber(\"/mavros/state\", mavros_msgs.msg.State, callback)\n    rospy.spin()\n\n\nif __name__ == \"__main__\":\n    listener()\n\n\n\nThis code creates a ros listener node for \"/mavros/state\" topic which it's type is \"\". The results should be similar to the following:\n\n\nall data is: header: \n  seq: 299\n  stamp: \n    secs: 1595581934\n    nsecs: 491440912\n  frame_id: ''\nconnected: True\narmed: False\nguided: False\nmanual_input: True\nmode: \"MANUAL\"\nsystem_status: 4\nRobot Arm Status: False\n\n\n\nWhich we need \"armed\" field, so that we have to use \"data.armed\" which is mention in above.\n\n\nArming robot\n\n\nTo accomplish arming your ardupilot robot, we have to use a ros service. To get all lists of available ros services, we have to use this command:\n\n\n\n\nrosservice list\n - Shows all available ros services\n\n\n\n\nWe have to use \"/mavros/cmd/arming\" service. For getting the type of this service, we have to use this command:\n\n\n\n\nrosservice type /mavros/cmd/arming\n - Shows the type of ros service\n\n\n\n\nThe result should be as follows:\n\n\nmavros_msgs/CommandBool\n\n\n\nSo we have to use \"CommandBool\" package inside python ros service. Finally the python code for write arm status would be as follows:\n\n\nimport rospy\nfrom mavros_msgs.srv import CommandBool\n\n\ndef caller():\n    rospy.init_node('caller', anonymous=True)\n    rate = rospy.Rate(10)\n    rospy.loginfo(\"waiting for ROS services\")\n    service_timeout = 30\n    try:\n        rospy.wait_for_service('/mavros/cmd/arming', service_timeout)\n        rospy.loginfo(\"ROS service is Up\")\n    except rospy.ROSException:\n        print(\"Failed\")\n\n    set_arming_srv = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)\n    set_arming_srv(True)\n    rospy.spin()\n\nif __name__ == \"__main__\":\n    try:\n        caller()\n    except rospy.ROSInternalException:\n        pass\n\n\n\nFinally if we want to both read the Arming status and set Arming value to robot simultaneously, we could use this python code:\n\n\nimport rospy\nfrom mavros_msgs.srv import CommandBool\nimport mavros_msgs.msg\n\narm_status = False\n\n\ndef callback(data):\n    print(\"Robot Arm Status:\", data.armed)\n    global arm_status\n    arm_status = data.armed\n\n\ndef listener_caller():\n    rospy.init_node('listener_caller', anonymous=True)\n    rospy.Subscriber(\"/mavros/state\", mavros_msgs.msg.State, callback)\n    rate = rospy.Rate(10)\n    rospy.loginfo(\"waiting for ROS services\")\n    service_timeout = 30\n    try:\n        rospy.wait_for_service('/mavros/cmd/arming', service_timeout)\n        rospy.loginfo(\"ROS service is Up\")\n    except rospy.ROSException:\n        print(\"Failed\")\n\n    set_arming_srv = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)\n    global arm_status\n    while not rospy.is_shutdown():\n        if not arm_status:\n            set_arming_srv(True)\n        rate.sleep()\n    rospy.spin()\n\n\nif __name__ == \"__main__\":\n    try:\n        listener_caller()\n    except rospy.ROSInternalException:\n        pass\n\n\n\nThis code will Arm the robot whenever the robot is disarmed. To access to these code directly visit \ngithub.com/masoudir/mavros_tutorial",
            "title": "example1 Rover ArmDisarmMove Python"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/example1_Rover_ArmDisarmMove_Python/#how-to-arm-and-disarm-ardupilot-sitl-rover-in-mavros",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to Arm and Disarm Ardupilot-SITL Rover in MAVROS"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/example1_Rover_ArmDisarmMove_Python/#initialize",
            "text": "You just need to follow these steps (has been mentioned in  Quick Start )",
            "title": "Initialize"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/example1_Rover_ArmDisarmMove_Python/#bringing-up-ardupilot-sitl-for-rover",
            "text": "cd <Your_Ardupilot_Instalation_Folder>/ardupilot/Tools/autotest/  - Jump to ardupilot folder    python3 sim_vehicle.py -v Rover  - Start Rover vehicle    Note that if you want to show other SITL modules such as map or console, you can use these commands:  python3 sim_vehicle.py -v Rover --map --console  Or alternatively you can mention them inside SITL terminal:  module load map\n\nmodule load console  Note: Please be patient when ardupilot is compiling robots at first time. This takes 2-3 minutes to complete.  You can see that ardupilot-sitl created some outputs such as \"127.0.0.1:14550\" \"127.0.0.1:14551\". These are auxiliary UDP ports for communicating this vehicle to another MAVProxy console. We use these ports in examples.",
            "title": "Bringing up Ardupilot-SITL for Rover"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/example1_Rover_ArmDisarmMove_Python/#connect-rover-to-mavros",
            "text": "source <ROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    source <MAVROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of MAVROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    roscore  - Brings up ros core for accessing its functions and built packages    roslaunch mavros apm.launch fcu_url:=udp://:14550@  - Connects vehicle from UDP:14550 port to MAVROS     Note: In order to make this document more useful, I have assumed that you put sourcing commands described above on the \"`/.bashrc\" file to be executed automatically. So that I have eliminated sourcing commands from the next steps.",
            "title": "Connect Rover to MAVROS"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/example1_Rover_ArmDisarmMove_Python/#arm-and-disarm-using-python",
            "text": "",
            "title": "Arm and Disarm using Python"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/example1_Rover_ArmDisarmMove_Python/#getting-arm-and-disarm-status",
            "text": "In the first step, we want to read the Arming status of our robot. For this, we have to use \"/mavros/state\" topic. To create connection to this topic, we have to get the type of this topic. For this, you can use this command:   rostopic type /mavros/state  - Shows the type of /mavros/state topic   The result should be as follows:  mavros_msgs/State  In python we have access to \"mavros_msgs/State\" library from package \"mavros_msgs.msg\". After that we have to write a python Subscriber which runs as an  event_handler . The final code for reading Arming status would be:  import rospy\nimport mavros_msgs.msg\n\ndef callback(data):\n    print(\"all data is:\", data)\n    print(\"Robot Arm Status:\", data.armed)\n\n\ndef listener():\n    rospy.init_node('listener', anonymous=True)\n    rospy.Subscriber(\"/mavros/state\", mavros_msgs.msg.State, callback)\n    rospy.spin()\n\n\nif __name__ == \"__main__\":\n    listener()  This code creates a ros listener node for \"/mavros/state\" topic which it's type is \"\". The results should be similar to the following:  all data is: header: \n  seq: 299\n  stamp: \n    secs: 1595581934\n    nsecs: 491440912\n  frame_id: ''\nconnected: True\narmed: False\nguided: False\nmanual_input: True\nmode: \"MANUAL\"\nsystem_status: 4\nRobot Arm Status: False  Which we need \"armed\" field, so that we have to use \"data.armed\" which is mention in above.",
            "title": "Getting Arm and Disarm status"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/example1_Rover_ArmDisarmMove_Python/#arming-robot",
            "text": "To accomplish arming your ardupilot robot, we have to use a ros service. To get all lists of available ros services, we have to use this command:   rosservice list  - Shows all available ros services   We have to use \"/mavros/cmd/arming\" service. For getting the type of this service, we have to use this command:   rosservice type /mavros/cmd/arming  - Shows the type of ros service   The result should be as follows:  mavros_msgs/CommandBool  So we have to use \"CommandBool\" package inside python ros service. Finally the python code for write arm status would be as follows:  import rospy\nfrom mavros_msgs.srv import CommandBool\n\n\ndef caller():\n    rospy.init_node('caller', anonymous=True)\n    rate = rospy.Rate(10)\n    rospy.loginfo(\"waiting for ROS services\")\n    service_timeout = 30\n    try:\n        rospy.wait_for_service('/mavros/cmd/arming', service_timeout)\n        rospy.loginfo(\"ROS service is Up\")\n    except rospy.ROSException:\n        print(\"Failed\")\n\n    set_arming_srv = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)\n    set_arming_srv(True)\n    rospy.spin()\n\nif __name__ == \"__main__\":\n    try:\n        caller()\n    except rospy.ROSInternalException:\n        pass  Finally if we want to both read the Arming status and set Arming value to robot simultaneously, we could use this python code:  import rospy\nfrom mavros_msgs.srv import CommandBool\nimport mavros_msgs.msg\n\narm_status = False\n\n\ndef callback(data):\n    print(\"Robot Arm Status:\", data.armed)\n    global arm_status\n    arm_status = data.armed\n\n\ndef listener_caller():\n    rospy.init_node('listener_caller', anonymous=True)\n    rospy.Subscriber(\"/mavros/state\", mavros_msgs.msg.State, callback)\n    rate = rospy.Rate(10)\n    rospy.loginfo(\"waiting for ROS services\")\n    service_timeout = 30\n    try:\n        rospy.wait_for_service('/mavros/cmd/arming', service_timeout)\n        rospy.loginfo(\"ROS service is Up\")\n    except rospy.ROSException:\n        print(\"Failed\")\n\n    set_arming_srv = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)\n    global arm_status\n    while not rospy.is_shutdown():\n        if not arm_status:\n            set_arming_srv(True)\n        rate.sleep()\n    rospy.spin()\n\n\nif __name__ == \"__main__\":\n    try:\n        listener_caller()\n    except rospy.ROSInternalException:\n        pass  This code will Arm the robot whenever the robot is disarmed. To access to these code directly visit  github.com/masoudir/mavros_tutorial",
            "title": "Arming robot"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/example1_Rover_ArmDisarmMove_Python/",
            "text": "How to Arm and Disarm Ardupilot-SITL Rover in MAVROS\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nYou just need to follow these steps (has been mentioned in \nQuick Start\n)\n\n\nBringing up Ardupilot-SITL for Rover\n\n\n\n\n\n\ncd <Your_Ardupilot_Instalation_Folder>/ardupilot/Tools/autotest/\n - Jump to ardupilot folder\n\n\n\n\n\n\npython3 sim_vehicle.py -v Rover\n - Start Rover vehicle\n\n\n\n\n\n\nNote that if you want to show other SITL modules such as map or console, you can use these commands:\n\n\npython3 sim_vehicle.py -v Rover --map --console\n\n\n\nOr alternatively you can mention them inside SITL terminal:\n\n\nmodule load map\n\nmodule load console\n\n\n\nNote: Please be patient when ardupilot is compiling robots at first time. This takes 2-3 minutes to complete.\n\n\nYou can see that ardupilot-sitl created some outputs such as \"127.0.0.1:14550\" \"127.0.0.1:14551\". These are auxiliary UDP ports for communicating this vehicle to another MAVProxy console. We use these ports in examples.    \n\n\nConnect Rover to MAVROS\n\n\n\n\n\n\nsource <ROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nsource <MAVROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of MAVROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nroscore\n - Brings up ros core for accessing its functions and built packages\n\n\n\n\n\n\nroslaunch mavros apm.launch fcu_url:=udp://:14550@\n - Connects vehicle from UDP:14550 port to MAVROS \n\n\n\n\n\n\nNote: In order to make this document more useful, I have assumed that you put sourcing commands described above on the \"`/.bashrc\" file to be executed automatically. So that I have eliminated sourcing commands from the next steps.\n\n\nArm and Disarm using Python\n\n\nGetting Arm and Disarm status\n\n\nIn the first step, we want to read the Arming status of our robot. For this, we have to use \"/mavros/state\" topic. To create connection to this topic, we have to get the type of this topic. For this, you can use this command:\n\n\n\n\nrostopic type /mavros/state\n - Shows the type of /mavros/state topic\n\n\n\n\nThe result should be as follows:\n\n\nmavros_msgs/State\n\n\n\nIn python we have access to \"mavros_msgs/State\" library from package \"mavros_msgs.msg\". After that we have to write a python Subscriber which runs as an \nevent_handler\n. The final code for reading Arming status would be:\n\n\nimport rospy\nimport mavros_msgs.msg\n\ndef callback(data):\n    print(\"all data is:\", data)\n    print(\"Robot Arm Status:\", data.armed)\n\n\ndef listener():\n    rospy.init_node('listener', anonymous=True)\n    rospy.Subscriber(\"/mavros/state\", mavros_msgs.msg.State, callback)\n    rospy.spin()\n\n\nif __name__ == \"__main__\":\n    listener()\n\n\n\nThis code creates a ros listener node for \"/mavros/state\" topic which it's type is \"\". The results should be similar to the following:\n\n\nall data is: header: \n  seq: 299\n  stamp: \n    secs: 1595581934\n    nsecs: 491440912\n  frame_id: ''\nconnected: True\narmed: False\nguided: False\nmanual_input: True\nmode: \"MANUAL\"\nsystem_status: 4\nRobot Arm Status: False\n\n\n\nWhich we need \"armed\" field, so that we have to use \"data.armed\" which is mention in above.\n\n\nArming robot\n\n\nTo accomplish arming your ardupilot robot, we have to use a ros service. To get all lists of available ros services, we have to use this command:\n\n\n\n\nrosservice list\n - Shows all available ros services\n\n\n\n\nWe have to use \"/mavros/cmd/arming\" service. For getting the type of this service, we have to use this command:\n\n\n\n\nrosservice type /mavros/cmd/arming\n - Shows the type of ros service\n\n\n\n\nThe result should be as follows:\n\n\nmavros_msgs/CommandBool\n\n\n\nSo we have to use \"CommandBool\" package inside python ros service. Finally the python code for write arm status would be as follows:\n\n\nimport rospy\nfrom mavros_msgs.srv import CommandBool\n\n\ndef caller():\n    rospy.init_node('caller', anonymous=True)\n    rate = rospy.Rate(10)\n    rospy.loginfo(\"waiting for ROS services\")\n    service_timeout = 30\n    try:\n        rospy.wait_for_service('/mavros/cmd/arming', service_timeout)\n        rospy.loginfo(\"ROS service is Up\")\n    except rospy.ROSException:\n        print(\"Failed\")\n\n    set_arming_srv = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)\n    set_arming_srv(True)\n    rospy.spin()\n\nif __name__ == \"__main__\":\n    try:\n        caller()\n    except rospy.ROSInternalException:\n        pass\n\n\n\nFinally if we want to both read the Arming status and set Arming value to robot simultaneously, we could use this python code:\n\n\nimport rospy\nfrom mavros_msgs.srv import CommandBool\nimport mavros_msgs.msg\n\narm_status = False\n\n\ndef callback(data):\n    print(\"Robot Arm Status:\", data.armed)\n    global arm_status\n    arm_status = data.armed\n\n\ndef listener_caller():\n    rospy.init_node('listener_caller', anonymous=True)\n    rospy.Subscriber(\"/mavros/state\", mavros_msgs.msg.State, callback)\n    rate = rospy.Rate(10)\n    rospy.loginfo(\"waiting for ROS services\")\n    service_timeout = 30\n    try:\n        rospy.wait_for_service('/mavros/cmd/arming', service_timeout)\n        rospy.loginfo(\"ROS service is Up\")\n    except rospy.ROSException:\n        print(\"Failed\")\n\n    set_arming_srv = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)\n    global arm_status\n    while not rospy.is_shutdown():\n        if not arm_status:\n            set_arming_srv(True)\n        rate.sleep()\n    rospy.spin()\n\n\nif __name__ == \"__main__\":\n    try:\n        listener_caller()\n    except rospy.ROSInternalException:\n        pass\n\n\n\nThis code will Arm the robot whenever the robot is disarmed. To access to these code directly visit \ngithub.com/masoudir/mavros_tutorial",
            "title": "example1 Rover ArmDisarmMove Python"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/example1_Rover_ArmDisarmMove_Python/#how-to-arm-and-disarm-ardupilot-sitl-rover-in-mavros",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to Arm and Disarm Ardupilot-SITL Rover in MAVROS"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/example1_Rover_ArmDisarmMove_Python/#initialize",
            "text": "You just need to follow these steps (has been mentioned in  Quick Start )",
            "title": "Initialize"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/example1_Rover_ArmDisarmMove_Python/#bringing-up-ardupilot-sitl-for-rover",
            "text": "cd <Your_Ardupilot_Instalation_Folder>/ardupilot/Tools/autotest/  - Jump to ardupilot folder    python3 sim_vehicle.py -v Rover  - Start Rover vehicle    Note that if you want to show other SITL modules such as map or console, you can use these commands:  python3 sim_vehicle.py -v Rover --map --console  Or alternatively you can mention them inside SITL terminal:  module load map\n\nmodule load console  Note: Please be patient when ardupilot is compiling robots at first time. This takes 2-3 minutes to complete.  You can see that ardupilot-sitl created some outputs such as \"127.0.0.1:14550\" \"127.0.0.1:14551\". These are auxiliary UDP ports for communicating this vehicle to another MAVProxy console. We use these ports in examples.",
            "title": "Bringing up Ardupilot-SITL for Rover"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/example1_Rover_ArmDisarmMove_Python/#connect-rover-to-mavros",
            "text": "source <ROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    source <MAVROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of MAVROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    roscore  - Brings up ros core for accessing its functions and built packages    roslaunch mavros apm.launch fcu_url:=udp://:14550@  - Connects vehicle from UDP:14550 port to MAVROS     Note: In order to make this document more useful, I have assumed that you put sourcing commands described above on the \"`/.bashrc\" file to be executed automatically. So that I have eliminated sourcing commands from the next steps.",
            "title": "Connect Rover to MAVROS"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/example1_Rover_ArmDisarmMove_Python/#arm-and-disarm-using-python",
            "text": "",
            "title": "Arm and Disarm using Python"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/example1_Rover_ArmDisarmMove_Python/#getting-arm-and-disarm-status",
            "text": "In the first step, we want to read the Arming status of our robot. For this, we have to use \"/mavros/state\" topic. To create connection to this topic, we have to get the type of this topic. For this, you can use this command:   rostopic type /mavros/state  - Shows the type of /mavros/state topic   The result should be as follows:  mavros_msgs/State  In python we have access to \"mavros_msgs/State\" library from package \"mavros_msgs.msg\". After that we have to write a python Subscriber which runs as an  event_handler . The final code for reading Arming status would be:  import rospy\nimport mavros_msgs.msg\n\ndef callback(data):\n    print(\"all data is:\", data)\n    print(\"Robot Arm Status:\", data.armed)\n\n\ndef listener():\n    rospy.init_node('listener', anonymous=True)\n    rospy.Subscriber(\"/mavros/state\", mavros_msgs.msg.State, callback)\n    rospy.spin()\n\n\nif __name__ == \"__main__\":\n    listener()  This code creates a ros listener node for \"/mavros/state\" topic which it's type is \"\". The results should be similar to the following:  all data is: header: \n  seq: 299\n  stamp: \n    secs: 1595581934\n    nsecs: 491440912\n  frame_id: ''\nconnected: True\narmed: False\nguided: False\nmanual_input: True\nmode: \"MANUAL\"\nsystem_status: 4\nRobot Arm Status: False  Which we need \"armed\" field, so that we have to use \"data.armed\" which is mention in above.",
            "title": "Getting Arm and Disarm status"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/example1_Rover_ArmDisarmMove_Python/#arming-robot",
            "text": "To accomplish arming your ardupilot robot, we have to use a ros service. To get all lists of available ros services, we have to use this command:   rosservice list  - Shows all available ros services   We have to use \"/mavros/cmd/arming\" service. For getting the type of this service, we have to use this command:   rosservice type /mavros/cmd/arming  - Shows the type of ros service   The result should be as follows:  mavros_msgs/CommandBool  So we have to use \"CommandBool\" package inside python ros service. Finally the python code for write arm status would be as follows:  import rospy\nfrom mavros_msgs.srv import CommandBool\n\n\ndef caller():\n    rospy.init_node('caller', anonymous=True)\n    rate = rospy.Rate(10)\n    rospy.loginfo(\"waiting for ROS services\")\n    service_timeout = 30\n    try:\n        rospy.wait_for_service('/mavros/cmd/arming', service_timeout)\n        rospy.loginfo(\"ROS service is Up\")\n    except rospy.ROSException:\n        print(\"Failed\")\n\n    set_arming_srv = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)\n    set_arming_srv(True)\n    rospy.spin()\n\nif __name__ == \"__main__\":\n    try:\n        caller()\n    except rospy.ROSInternalException:\n        pass  Finally if we want to both read the Arming status and set Arming value to robot simultaneously, we could use this python code:  import rospy\nfrom mavros_msgs.srv import CommandBool\nimport mavros_msgs.msg\n\narm_status = False\n\n\ndef callback(data):\n    print(\"Robot Arm Status:\", data.armed)\n    global arm_status\n    arm_status = data.armed\n\n\ndef listener_caller():\n    rospy.init_node('listener_caller', anonymous=True)\n    rospy.Subscriber(\"/mavros/state\", mavros_msgs.msg.State, callback)\n    rate = rospy.Rate(10)\n    rospy.loginfo(\"waiting for ROS services\")\n    service_timeout = 30\n    try:\n        rospy.wait_for_service('/mavros/cmd/arming', service_timeout)\n        rospy.loginfo(\"ROS service is Up\")\n    except rospy.ROSException:\n        print(\"Failed\")\n\n    set_arming_srv = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)\n    global arm_status\n    while not rospy.is_shutdown():\n        if not arm_status:\n            set_arming_srv(True)\n        rate.sleep()\n    rospy.spin()\n\n\nif __name__ == \"__main__\":\n    try:\n        listener_caller()\n    except rospy.ROSInternalException:\n        pass  This code will Arm the robot whenever the robot is disarmed. To access to these code directly visit  github.com/masoudir/mavros_tutorial",
            "title": "Arming robot"
        }
    ]
}