{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to MAVROS_Tutorial\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \nhttps://github.com/masoudir/mavros_tutorial\n\n\nC++ Examples on Github:\n \nhttps://github.com/masoudir/mavros_cpp_examples\n\n\nPython Examples on Github:\n \nhttps://github.com/masoudir/mavros_python_examples\n\n\nWeb Page:\n \nhttps://masoudir.github.io/mavros_tutorial/\n\n\nIntroduction\n\n\nThis project illustrates some examples about simulating robots via Ardupilot-SITL using python and C++ languages and \nMAVROS (MAV-link protocol for Robotic Operating System).\n\n\nInstall Requirements\n\n\nInstall some requirements\n\n\nJust follow this command:\n\n\n\n\nsudo apt-get install python-dev python-pip python3-dev python3-pip python3-rospkg\n - Installs python3 and pip3.\n\n\n\n\nInstall Ardupilot-SITL\n\n\nreference : \nhttps://ardupilot.org/dev/docs/building-setup-linux.html\n\n\nInstall MAVProxy \n(Auxiliary)\n\n\nI prefer to use external proxy if I needed for MAVlink protocol. MAVProxy can forward any MAVLink messages from input to other TCP/UDP/Serial ports. It would be helpful if you are using one vehicle for two or more GCS or controller nodes. To install just use this command:\n\n\n\n\npip install MAVProxy\n - Install MAVProxy with pip in python2\n\n\n\n\nInstall ROS\n\n\nROS is semi-Operating System for robots. ROS is generally available for many programming languages such as C++, Python, \nJavascript and etc. It's free and easy to use. Until now there are three supported versions of ROS (kinetic, melodic and\nneotic) and I prefer to use melodic in this document. To install ROS-melodic, there are two ways of installing from \nready-built binary files or installing from source. I prefer to install the full-version of ros-melodic. If you are not \nusing ubuntu, it's likely to face some problems in installing ROS from binary files mentioned in ROS tutorials from \nsource, because its procedure is common for any kinds of linux platforms.\n\n\nFor install ROS-melodic from source you can refer to this \nlink\n.\n\n\nFor install ROS-melodic from binary files you can refer to this \nlink\n.\n\n\nInstall MAVROS\n\n\nIf you want to have installed ROS from binary files, this is recommended to install MAVROS from binary files too. \n\n\nInstall MAVROS from binary files\n\n\nFor this, you can refer to this \nlink\n.\n\n\nFor case of ease, the commands to be executed for installing MAVROS from binary files are as below:\n\n\nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nchmod a+x install_geographiclib_datasets.sh\n./install_geographiclib_datasets.sh\n\n\n\nInstall MAVROS from source\n\n\nIf you are not using ubuntu, this is strongly recommended to install MAVROS from source due to the similarity between \nvarious Linux distributions. You can refer to this \nlink\n \nfor full documentation. But here is the abstract commands:\n\n\n\n\n\n\nsource <ROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n) \n\n\n\n\n\n\nroscore\n - Brings up ros core for accessing its functions and built packages\n\n\n\n\n\n\nsudo apt-get install python-catkin-tools python-rosinstall-generator -y\n - Installs python packages related to ros\n\n\n\n\n\n\ncd ~/my_catkin_ws/src\n - Jump to catkin src folder\n\n\n\n\n\n\ngit clone https://github.com/ros-geographic-info/unique_identifier.git\n - clone unique_identifier package\n\n\n\n\n\n\ngit clone https://github.com/ros-geographic-info/geographic_info.git\n - clone geographic_info package\n\n\n\n\n\n\ncd ~/my_catkin_ws\n - Jump to catkin folder\n\n\n\n\n\n\ncatkin init\n - Initialize catkin workspace\n\n\n\n\n\n\nwstool init src\n - Initialize ros package installer\n\n\n\n\n\n\nrosinstall_generator --rosdistro melodic mavlink | tee /tmp/mavros.rosinstall\n - Install MAVLink (we use the melodic reference for all ROS distros as it's not distro-specific and up to date)\n\n\n\n\n\n\nrosinstall_generator --upstream mavros | tee -a /tmp/mavros.rosinstall\n - Install MAVROS: get source (upstream - released)\n\n\n\n\n\n\nwstool merge -t src /tmp/mavros.rosinstall\n - Create workspace & deps\n\n\n\n\n\n\nwstool update -t src -j4\n - Builds the ros workspace\n\n\n\n\n\n\nrosdep install --from-paths src --ignore-src -y\n - Install packages for ros\n\n\n\n\n\n\n./src/mavros/mavros/scripts/install_geographiclib_datasets.sh\n - Install GeographicLib datasets\n\n\n\n\n\n\ncatkin build\n - Build source\n\n\n\n\n\n\nsource devel/setup.bash\n - Uses setup.bash or setup.zsh from workspace so that rosrun can find nodes from this workspace\n\n\n\n\n\n\nFor installing MAVROS from binary packages please refer to \nhttps://ardupilot.org/dev/docs/ros-install.html#installing-mavros\n.\n\n\nIgnite Rover robot\n\n\nBringing up Ardupilot-SITL for Rover\n\n\n\n\n\n\ncd <Your_Ardupilot_Instalation_Folder>/ardupilot/Tools/autotest/\n - Jump to ardupilot folder\n\n\n\n\n\n\npython sim_vehicle.py -v Rover\n - Start Rover vehicle \n\n\n\n\n\n\nBecareful to do not use python3 to run or build MAVProxy due to some mismatches found in this package with MAVProxy \nmodules such as \"map\" and \"console\".\n\n\nNote that if you want to show other SITL modules such as map or console, you can use these commands:\n\n\npython sim_vehicle.py -v Rover --map --console\n\n\n\nOr alternatively you can mention them inside SITL terminal:\n\n\nmodule load map\n\nmodule load console\n\n\n\nNote: Please be patient when ardupilot is compiling robots at first time. This takes 2-3 minutes to complete.\n\n\nYou can see that ardupilot-sitl created some outputs such as \"127.0.0.1:14550\" \"127.0.0.1:14551\". These are auxiliary UDP ports for communicating this vehicle to another MAVProxy console. We use these ports in examples.    \n\n\nConnect Rover to MAVROS\n\n\nAt first you have to source ROS and MAVROS. If you have installed them from binary files, follow these commands:\n\n\n\n\nsource /opt/ros/melodic/setup.bash\n - Defines the installed folder of ROS and MAVROS\n\n\n\n\nOr if you have installed them from source, follow these commands:\n\n\n\n\n\n\nsource <ROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nsource <MAVROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of MAVROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nThen it is the time for bringing up the core of ros:\n\n\n\n\nroscore\n - Brings up ros core for accessing its functions and built packages\n\n\n\n\nAfterwards, you have to tell the MAVROS how to find the vehicle you are using it:\n\n\n\n\nroslaunch mavros apm.launch fcu_url:=udp://:14550@\n - Connects vehicle from UDP:14550 port to MAVROS\n\n\n\n\nOr if you want to connect to your robot via TCP port remotely, you can use this command\n\n\n\n\nroslaunch mavros apm.launch fcu_url:=tcp://<REMOTE_HOST>:<TCP_PORT>@\n - Connects vehicle from REMOTE_HOST:TCP_PORT port to MAVROS\n\n\n\n\nView ROS topics\n\n\n\n\n\n\nsource <ROS_INSTALL_PATH>/devel/setup.bash\n - Defines the installed folder of ROS (You can insert this command at the \nbottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command: \nsudo nano ~/.bashrc\n)\n\n\n\n\n\n\nrqt\n - Executes ROS plugin monitoring window\n\n\n\n\n\n\nThen in rqt window shown, you have to select from \"Plugins\" > \"Topics\" > \"Topic Monitor\" to stat topic monitoring. This \nwill show you the bottom figure:\n\n\n\n\nYou can tick any of the topic shown and monitor its contents. But in my own experience, I think that it's better to use commands in terminal or write them down in your scripts (bash, C++, python and ...)",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-mavros_tutorial",
            "text": "Author:  Masoud Iranmehr  Github Page:   https://github.com/masoudir/mavros_tutorial  C++ Examples on Github:   https://github.com/masoudir/mavros_cpp_examples  Python Examples on Github:   https://github.com/masoudir/mavros_python_examples  Web Page:   https://masoudir.github.io/mavros_tutorial/",
            "title": "Welcome to MAVROS_Tutorial"
        },
        {
            "location": "/#introduction",
            "text": "This project illustrates some examples about simulating robots via Ardupilot-SITL using python and C++ languages and \nMAVROS (MAV-link protocol for Robotic Operating System).",
            "title": "Introduction"
        },
        {
            "location": "/#install-requirements",
            "text": "",
            "title": "Install Requirements"
        },
        {
            "location": "/#install-some-requirements",
            "text": "Just follow this command:   sudo apt-get install python-dev python-pip python3-dev python3-pip python3-rospkg  - Installs python3 and pip3.",
            "title": "Install some requirements"
        },
        {
            "location": "/#install-ardupilot-sitl",
            "text": "reference :  https://ardupilot.org/dev/docs/building-setup-linux.html",
            "title": "Install Ardupilot-SITL"
        },
        {
            "location": "/#install-mavproxy-auxiliary",
            "text": "I prefer to use external proxy if I needed for MAVlink protocol. MAVProxy can forward any MAVLink messages from input to other TCP/UDP/Serial ports. It would be helpful if you are using one vehicle for two or more GCS or controller nodes. To install just use this command:   pip install MAVProxy  - Install MAVProxy with pip in python2",
            "title": "Install MAVProxy (Auxiliary)"
        },
        {
            "location": "/#install-ros",
            "text": "ROS is semi-Operating System for robots. ROS is generally available for many programming languages such as C++, Python, \nJavascript and etc. It's free and easy to use. Until now there are three supported versions of ROS (kinetic, melodic and\nneotic) and I prefer to use melodic in this document. To install ROS-melodic, there are two ways of installing from \nready-built binary files or installing from source. I prefer to install the full-version of ros-melodic. If you are not \nusing ubuntu, it's likely to face some problems in installing ROS from binary files mentioned in ROS tutorials from \nsource, because its procedure is common for any kinds of linux platforms.  For install ROS-melodic from source you can refer to this  link .  For install ROS-melodic from binary files you can refer to this  link .",
            "title": "Install ROS"
        },
        {
            "location": "/#install-mavros",
            "text": "If you want to have installed ROS from binary files, this is recommended to install MAVROS from binary files too.",
            "title": "Install MAVROS"
        },
        {
            "location": "/#install-mavros-from-binary-files",
            "text": "For this, you can refer to this  link .  For case of ease, the commands to be executed for installing MAVROS from binary files are as below:  sudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nchmod a+x install_geographiclib_datasets.sh\n./install_geographiclib_datasets.sh",
            "title": "Install MAVROS from binary files"
        },
        {
            "location": "/#install-mavros-from-source",
            "text": "If you are not using ubuntu, this is strongly recommended to install MAVROS from source due to the similarity between \nvarious Linux distributions. You can refer to this  link  \nfor full documentation. But here is the abstract commands:    source <ROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )     roscore  - Brings up ros core for accessing its functions and built packages    sudo apt-get install python-catkin-tools python-rosinstall-generator -y  - Installs python packages related to ros    cd ~/my_catkin_ws/src  - Jump to catkin src folder    git clone https://github.com/ros-geographic-info/unique_identifier.git  - clone unique_identifier package    git clone https://github.com/ros-geographic-info/geographic_info.git  - clone geographic_info package    cd ~/my_catkin_ws  - Jump to catkin folder    catkin init  - Initialize catkin workspace    wstool init src  - Initialize ros package installer    rosinstall_generator --rosdistro melodic mavlink | tee /tmp/mavros.rosinstall  - Install MAVLink (we use the melodic reference for all ROS distros as it's not distro-specific and up to date)    rosinstall_generator --upstream mavros | tee -a /tmp/mavros.rosinstall  - Install MAVROS: get source (upstream - released)    wstool merge -t src /tmp/mavros.rosinstall  - Create workspace & deps    wstool update -t src -j4  - Builds the ros workspace    rosdep install --from-paths src --ignore-src -y  - Install packages for ros    ./src/mavros/mavros/scripts/install_geographiclib_datasets.sh  - Install GeographicLib datasets    catkin build  - Build source    source devel/setup.bash  - Uses setup.bash or setup.zsh from workspace so that rosrun can find nodes from this workspace    For installing MAVROS from binary packages please refer to  https://ardupilot.org/dev/docs/ros-install.html#installing-mavros .",
            "title": "Install MAVROS from source"
        },
        {
            "location": "/#ignite-rover-robot",
            "text": "",
            "title": "Ignite Rover robot"
        },
        {
            "location": "/#bringing-up-ardupilot-sitl-for-rover",
            "text": "cd <Your_Ardupilot_Instalation_Folder>/ardupilot/Tools/autotest/  - Jump to ardupilot folder    python sim_vehicle.py -v Rover  - Start Rover vehicle     Becareful to do not use python3 to run or build MAVProxy due to some mismatches found in this package with MAVProxy \nmodules such as \"map\" and \"console\".  Note that if you want to show other SITL modules such as map or console, you can use these commands:  python sim_vehicle.py -v Rover --map --console  Or alternatively you can mention them inside SITL terminal:  module load map\n\nmodule load console  Note: Please be patient when ardupilot is compiling robots at first time. This takes 2-3 minutes to complete.  You can see that ardupilot-sitl created some outputs such as \"127.0.0.1:14550\" \"127.0.0.1:14551\". These are auxiliary UDP ports for communicating this vehicle to another MAVProxy console. We use these ports in examples.",
            "title": "Bringing up Ardupilot-SITL for Rover"
        },
        {
            "location": "/#connect-rover-to-mavros",
            "text": "At first you have to source ROS and MAVROS. If you have installed them from binary files, follow these commands:   source /opt/ros/melodic/setup.bash  - Defines the installed folder of ROS and MAVROS   Or if you have installed them from source, follow these commands:    source <ROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of ROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    source <MAVROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of MAVROS (You can insert this command at the bottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    Then it is the time for bringing up the core of ros:   roscore  - Brings up ros core for accessing its functions and built packages   Afterwards, you have to tell the MAVROS how to find the vehicle you are using it:   roslaunch mavros apm.launch fcu_url:=udp://:14550@  - Connects vehicle from UDP:14550 port to MAVROS   Or if you want to connect to your robot via TCP port remotely, you can use this command   roslaunch mavros apm.launch fcu_url:=tcp://<REMOTE_HOST>:<TCP_PORT>@  - Connects vehicle from REMOTE_HOST:TCP_PORT port to MAVROS",
            "title": "Connect Rover to MAVROS"
        },
        {
            "location": "/#view-ros-topics",
            "text": "source <ROS_INSTALL_PATH>/devel/setup.bash  - Defines the installed folder of ROS (You can insert this command at the \nbottom of ~/.bashrc file to automatically run this command while opening a new shell. For this, you can use this command:  sudo nano ~/.bashrc )    rqt  - Executes ROS plugin monitoring window    Then in rqt window shown, you have to select from \"Plugins\" > \"Topics\" > \"Topic Monitor\" to stat topic monitoring. This \nwill show you the bottom figure:   You can tick any of the topic shown and monitor its contents. But in my own experience, I think that it's better to use commands in terminal or write them down in your scripts (bash, C++, python and ...)",
            "title": "View ROS topics"
        },
        {
            "location": "/about/",
            "text": "Masoud Iranmehr\n\n\nMy Bio\n\n\nI was born in Sari, Mazandaran, Iran. I am graduated in Master of science in Electronics in Sharif University, Tehran, Iran.\n\n\nMy Interests\n\n\nI am mostly interested in \n(Linux/Arm) Embedded Systems\n and also \nRobotics\n and among all of methods has been designed, I love ROS (Robotic Operating System), because it's very easy to use and we can use this via many programming languages such as C++, Python, Javascript and etc.\nAlso I found that Ardupilot is a very professional open source package for driving so many kinds of robots such as Planes, Copters and Rovers. So I decided to use this tool for driving simple robots and also using ROS for controlling it.\n\n\nAlso I am an expert in using ARM Micro-Controllers (STM32) in robotics and I am able to communicate directly between these kind of processors and ROS. This could be used to design simple robots under ROS functions.\n\n\nI am here to share my Robotics knowledge to everybody. If you are interested in my example packages and its docuemnts, do not hesitate to join in my git repository and be a contributer.  \n\n\nYou can directly ask me about my packages for free via one of these methods:\n\n\nEmail address: \nmasoud.iranmehr@gmail.com\n\n\nYours Sincreley,\n\n\nMasoud Iranmehr",
            "title": "About"
        },
        {
            "location": "/about/#masoud-iranmehr",
            "text": "",
            "title": "Masoud Iranmehr"
        },
        {
            "location": "/about/#my-bio",
            "text": "I was born in Sari, Mazandaran, Iran. I am graduated in Master of science in Electronics in Sharif University, Tehran, Iran.",
            "title": "My Bio"
        },
        {
            "location": "/about/#my-interests",
            "text": "I am mostly interested in  (Linux/Arm) Embedded Systems  and also  Robotics  and among all of methods has been designed, I love ROS (Robotic Operating System), because it's very easy to use and we can use this via many programming languages such as C++, Python, Javascript and etc.\nAlso I found that Ardupilot is a very professional open source package for driving so many kinds of robots such as Planes, Copters and Rovers. So I decided to use this tool for driving simple robots and also using ROS for controlling it.  Also I am an expert in using ARM Micro-Controllers (STM32) in robotics and I am able to communicate directly between these kind of processors and ROS. This could be used to design simple robots under ROS functions.  I am here to share my Robotics knowledge to everybody. If you are interested in my example packages and its docuemnts, do not hesitate to join in my git repository and be a contributer.    You can directly ask me about my packages for free via one of these methods:  Email address:  masoud.iranmehr@gmail.com  Yours Sincreley,  Masoud Iranmehr",
            "title": "My Interests"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/",
            "text": "How to change mode of Ardupilot-SITL Rover\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n\n\nChange vehicle mode\n\n\nChange vehicle mode using MAVProxy or Ardupilot-SITL\n\n\nGet mode\n\n\nIf you want to see the last mode of vehicle, you can just looking for the name before \">\" character in these terminals.\n\n\nSet mode\n\n\nAlso if you want to change the mode, you can send your commands directly from your terminal provided by MAVProxy or SITL. For example if you want to change vehicle mode to \n\"GUIDED\"\n, you can type this command:\n\n\n\n\nGUIDED\n - Change mode to GUIDED\n\n\n\n\nAlso you can view all of available modes for your vehicle via this command:\n\n\n\n\nmode\n - Shows all available modes\n\n\n\n\nChange vehicle mode using ROS rqt:\n\n\nAt first you need to add two plugin from rqt:\n\n\nPlugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller\n\n\n\nThen in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".\n\n\nThen in \"Service Caller\" side, you have to select \"/mavros/set_mode\" and then in the field of \"custom_mode\", you can set\nyour vehicle mode. Then click on \"call\" button to send this message. The result should be as follow:\n\n\n\n\nChange vehicle mode using ROS command lines\n\n\nGet mode\n\n\nIf you want to see the last mode of the vehicle, you can just type this command:\n\n\n\n\nrostopic echo /mavros/state\n - Returns all contents of /mavros/state topic periodically\n\n\n\n\nThe results should be as similar as this:\n\n\n---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---\n\n\n\nYou can find the mode in the field of \"mode\" of the result shown.\n\n\nSet mode\n\n\nYou need to call a ros service in order to do that. Just follow these commands:\n\n\n\n\nrosservice info /mavros/set_mode\n - To see its arguments and type of its Class Message\n\n\n\n\nThis command gives you this result:\n\n\nNode: /mavros\nURI: rosrpc://ubuntu:42571\nType: mavros_msgs/SetMode\nArgs: base_mode custom_mode\n\n\n\n\"mavros_msgs/SetMode\" is the type of this service srv file and \"Args\" are our input arguments, but we have to know their types, so that we type this command:\n\n\n\n\nrossrv show mavros_msgs/SetMode\n - Getting details of the mentioned srv file\n\n\n\n\nThis will result as below:\n\n\nuint8 MAV_MODE_PREFLIGHT=0\nuint8 MAV_MODE_STABILIZE_DISARMED=80\nuint8 MAV_MODE_STABILIZE_ARMED=208\nuint8 MAV_MODE_MANUAL_DISARMED=64\nuint8 MAV_MODE_MANUAL_ARMED=192\nuint8 MAV_MODE_GUIDED_DISARMED=88\nuint8 MAV_MODE_GUIDED_ARMED=216\nuint8 MAV_MODE_AUTO_DISARMED=92\nuint8 MAV_MODE_AUTO_ARMED=220\nuint8 MAV_MODE_TEST_DISARMED=66\nuint8 MAV_MODE_TEST_ARMED=194\nuint8 base_mode\nstring custom_mode\n---\nbool mode_sent\n\n\n\nIn this case, \"custom_mode\" is the parameter needs to being configured and its type is \"string\". For example if you want to change the vehicle \nmode to \"GUIDED\" follow this command:\n\n\n\n\nrosservice call /mavros/set_mode \"custom_mode: 'GUIDED'\"\n - Change vehicle mode to \"GUIDED\"\n\n\n\n\nAnother method is to use \"rosrun\" command:\n\n\n\n\n\n\nrosrun mavros mavsys mode -c MANUAL\n - If you want to change mode to \"MANUAL\"\n\n\n\n\n\n\nrosrun mavros mavsys mode -b <ENUM VALUE>\n - If you want to use \"base_mode\" to change mode",
            "title": "Step1 How to change mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#how-to-change-mode-of-ardupilot-sitl-rover",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to change mode of Ardupilot-SITL Rover"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#initialize",
            "text": "Please follow steps mentioned in this  link",
            "title": "Initialize"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#change-vehicle-mode",
            "text": "",
            "title": "Change vehicle mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#change-vehicle-mode-using-mavproxy-or-ardupilot-sitl",
            "text": "",
            "title": "Change vehicle mode using MAVProxy or Ardupilot-SITL"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#get-mode",
            "text": "If you want to see the last mode of vehicle, you can just looking for the name before \">\" character in these terminals.",
            "title": "Get mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#set-mode",
            "text": "Also if you want to change the mode, you can send your commands directly from your terminal provided by MAVProxy or SITL. For example if you want to change vehicle mode to  \"GUIDED\" , you can type this command:   GUIDED  - Change mode to GUIDED   Also you can view all of available modes for your vehicle via this command:   mode  - Shows all available modes",
            "title": "Set mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#change-vehicle-mode-using-ros-rqt",
            "text": "At first you need to add two plugin from rqt:  Plugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller  Then in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".  Then in \"Service Caller\" side, you have to select \"/mavros/set_mode\" and then in the field of \"custom_mode\", you can set\nyour vehicle mode. Then click on \"call\" button to send this message. The result should be as follow:",
            "title": "Change vehicle mode using ROS rqt:"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#change-vehicle-mode-using-ros-command-lines",
            "text": "",
            "title": "Change vehicle mode using ROS command lines"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#get-mode_1",
            "text": "If you want to see the last mode of the vehicle, you can just type this command:   rostopic echo /mavros/state  - Returns all contents of /mavros/state topic periodically   The results should be as similar as this:  ---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---  You can find the mode in the field of \"mode\" of the result shown.",
            "title": "Get mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step1_How_to_change_mode/#set-mode_1",
            "text": "You need to call a ros service in order to do that. Just follow these commands:   rosservice info /mavros/set_mode  - To see its arguments and type of its Class Message   This command gives you this result:  Node: /mavros\nURI: rosrpc://ubuntu:42571\nType: mavros_msgs/SetMode\nArgs: base_mode custom_mode  \"mavros_msgs/SetMode\" is the type of this service srv file and \"Args\" are our input arguments, but we have to know their types, so that we type this command:   rossrv show mavros_msgs/SetMode  - Getting details of the mentioned srv file   This will result as below:  uint8 MAV_MODE_PREFLIGHT=0\nuint8 MAV_MODE_STABILIZE_DISARMED=80\nuint8 MAV_MODE_STABILIZE_ARMED=208\nuint8 MAV_MODE_MANUAL_DISARMED=64\nuint8 MAV_MODE_MANUAL_ARMED=192\nuint8 MAV_MODE_GUIDED_DISARMED=88\nuint8 MAV_MODE_GUIDED_ARMED=216\nuint8 MAV_MODE_AUTO_DISARMED=92\nuint8 MAV_MODE_AUTO_ARMED=220\nuint8 MAV_MODE_TEST_DISARMED=66\nuint8 MAV_MODE_TEST_ARMED=194\nuint8 base_mode\nstring custom_mode\n---\nbool mode_sent  In this case, \"custom_mode\" is the parameter needs to being configured and its type is \"string\". For example if you want to change the vehicle \nmode to \"GUIDED\" follow this command:   rosservice call /mavros/set_mode \"custom_mode: 'GUIDED'\"  - Change vehicle mode to \"GUIDED\"   Another method is to use \"rosrun\" command:    rosrun mavros mavsys mode -c MANUAL  - If you want to change mode to \"MANUAL\"    rosrun mavros mavsys mode -b <ENUM VALUE>  - If you want to use \"base_mode\" to change mode",
            "title": "Set mode"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/",
            "text": "How to Arm and Disarm Ardupilot-SITL Rover\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n\n\nArm and Disarm\n\n\nArm and Disarm using MAVProxy or Ardupilot-SITL\n\n\nYou can send your commands directly from your terminal provided by MAVProxy or SITL. For this just type this command:\n\n\n\n\n\n\narm throttle\n - Arms the robot\n\n\n\n\n\n\ndisarm\n - Disarms the robot\n\n\n\n\n\n\nArm and Disarm using ROS rqt\n\n\nAt first you need to add two plugin from rqt:\n\n\nPlugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller\n\n\n\nThen in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".\n\n\nThen in \"Service Caller\" side, you have to select \"/mavros/cmd/arming\" and then in the field of \"value\", you can set\nyour arm status as a bool type variable (False/ True).  Then click on \"call\" button to send this message. The result should be as follow:\n\n\n\n\nArm and Disarm using ROS commands lines\n\n\nMonitoring Rover general status (Arm status and Mode name)\n\n\nIf you want to view the general status of your ardupilot robot in MAVROS, you have to know all the topics created by MAVROS:\n\n\n\n\nrostopic list\n - Returns all topics available\n\n\n\n\nThen you can see that every part of your robot has been mapped to a specific topic. In order to show robot arming status, you must use \"/mavros/state\" topic:\n\n\n\n\nrostopic echo /mavros/state\n - Returns all contents of /mavros/state topic periodically\n\n\n\n\nThe results should be as similar as this:\n\n\n---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---\n\n\n\nThe command \"rostopic echo \n\" will return all the contents of the topic every one second. In this case, \n\"connected\" field shows you that your MAVROS is still connected to the robot. Also \"mode\" shows you the name of vehicle \nmode at that time.\n\n\nSend Arm/Disarm command to robot\n\n\nJust follow these commands:\n\n\n\n\n\n\nrosservice call /mavros/cmd/arming True\n - Send Arm command to robot\n\n\n\n\n\n\nrosservice call /mavros/cmd/arming False\n - Send Disarm command to robot\n\n\n\n\n\n\nAnother method is to use \"rosrun\" command:\n\n\n\n\n\n\nrosrun mavros mavsafety arm\n - Send Arm command to robot\n\n\n\n\n\n\nrosrun mavros mavsafety disarm\n - Send Disarm command to robot",
            "title": "Step2 How to Arm and Disarm"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/#how-to-arm-and-disarm-ardupilot-sitl-rover",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to Arm and Disarm Ardupilot-SITL Rover"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/#initialize",
            "text": "Please follow steps mentioned in this  link",
            "title": "Initialize"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/#arm-and-disarm",
            "text": "",
            "title": "Arm and Disarm"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/#arm-and-disarm-using-mavproxy-or-ardupilot-sitl",
            "text": "You can send your commands directly from your terminal provided by MAVProxy or SITL. For this just type this command:    arm throttle  - Arms the robot    disarm  - Disarms the robot",
            "title": "Arm and Disarm using MAVProxy or Ardupilot-SITL"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/#arm-and-disarm-using-ros-rqt",
            "text": "At first you need to add two plugin from rqt:  Plugins -> Topics -> Topic Monitor\nPlugins -> Services -> Service Caller  Then in \"Topic Monitor\" side, you have to tick the topic of \"/mavros/state\" to view its contents, so that you can get \nthe vehicle mode and also some other parameters such as \"arm status\" and \"Guided status\".  Then in \"Service Caller\" side, you have to select \"/mavros/cmd/arming\" and then in the field of \"value\", you can set\nyour arm status as a bool type variable (False/ True).  Then click on \"call\" button to send this message. The result should be as follow:",
            "title": "Arm and Disarm using ROS rqt"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/#arm-and-disarm-using-ros-commands-lines",
            "text": "",
            "title": "Arm and Disarm using ROS commands lines"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/#monitoring-rover-general-status-arm-status-and-mode-name",
            "text": "If you want to view the general status of your ardupilot robot in MAVROS, you have to know all the topics created by MAVROS:   rostopic list  - Returns all topics available   Then you can see that every part of your robot has been mapped to a specific topic. In order to show robot arming status, you must use \"/mavros/state\" topic:   rostopic echo /mavros/state  - Returns all contents of /mavros/state topic periodically   The results should be as similar as this:  ---                                                                                                                                                                    \nheader:                                                                                                                                                                \n  stamp: 09                                                                                                                                                            \n    secs: 1595198641\n\n    nsecs: 651358095                                                                                                                                                   \n  frame_id: ''                                                                                                                                                         \nconnected: True                                                                                                                                                        \nguided: False                                                                                                                                                          \nmanual_input: True\n\nmode: \"MANUAL\"                                                                                                                                                         \nsystem_status: 4                                                                                                                                                       \n---  The command \"rostopic echo  \" will return all the contents of the topic every one second. In this case, \n\"connected\" field shows you that your MAVROS is still connected to the robot. Also \"mode\" shows you the name of vehicle \nmode at that time.",
            "title": "Monitoring Rover general status (Arm status and Mode name)"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step2_How_to_Arm_and_Disarm/#send-armdisarm-command-to-robot",
            "text": "Just follow these commands:    rosservice call /mavros/cmd/arming True  - Send Arm command to robot    rosservice call /mavros/cmd/arming False  - Send Disarm command to robot    Another method is to use \"rosrun\" command:    rosrun mavros mavsafety arm  - Send Arm command to robot    rosrun mavros mavsafety disarm  - Send Disarm command to robot",
            "title": "Send Arm/Disarm command to robot"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/",
            "text": "How to move Ardupilot-SITL Rover\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n. Then you need to change the mode of your vehicle to \"GUIDED\"\nusing this \nlink\n then you have to ARM your robot using one of the mentioned methods on this\n[link]. Then it is time to move your vehicle which is described here. \n\n\nMove your vehicle\n\n\nMove your vehicle using MAVProxy or Ardupilot-SITL\n\n\nWe assume that your vehicle is in \"GUIDED\" mode, if it's not please follow the links mentioned in \"Initialize\" sector on\nthis page. Then move your vehicle using this command in MAVproxy or SITL:\n\n\n\n\nGUIDED lat lon alt\n - Move vehicle to specified destination\n\n\n\n\nParameters of (lat, lon, alt) are the location parameters to determive the destination of the vehicle.\n\n\nThen if you want to stop vehicle from moving, you need this command:\n\n\n\n\nmode HOLD\n - Stops the vehicle\n\n\n\n\nAlso there are some other modes to make vehicle move such as \"RTL\", \"MANUAL\" and etc . Please refer to this \n\nlink\n for further information.\n\n\nMove your vehicle using ROS rqt:++\n\n\nWe assume that your vehicle is in \"GUIDED\" mode, if it's not please follow the links mentioned in \"Initialize\" sector on\nthis page. Then you need to add this plugin from rqt:\n\n\nPlugins -> Topics -> Message Publisher\n\n\n\nThen you have to add a topic with the address of \"/mavros/setpoint_raw/global\" and click \"+\" to add. After that tou need \nto change the value of position (\"latitude\", \"longitude\", \"altitude\") in order to make a destination for the vehicle.\nThen tick this topic to be published every 1 second (this duration can be changed) or even right click on the topic and \nthen choose \"Publish Selected Once\" to publish only once. Then you can see that your vehicle moves to the specified \ndestination.\n\n\nChange vehicle mode using ROS command lines\n\n\nYou need to publish the destination location via this command:\n\n\n\n\nrostopic pub /mavros/setpoint_raw/global mavros_msgs/GlobalPositionTarget -1 \"{'longitude': 14.51218,'latitude': 10.15785}\"\n - Move Rover to the specified destination\n\n\n\n\nOr if you want to specify only latitude (longitude=0):\n\n\n\n\nrostopic pub /mavros/setpoint_raw/global mavros_msgs/GlobalPositionTarget -1 \"'longitude': 14.51218\"\n - Move Rover to the specified destination\n\n\n\n\nIt is noted that \"-1\" determines that this command will be only published once. If you want to publish this message \nperiodically, you have to remove \"-1\" argument and also you can use the argument of \"-r RATE\" to specify the publish rate for this message:\n\n\n\n\nrostopic pub /mavros/setpoint_raw/global mavros_msgs/GlobalPositionTarget -r 1\"{'longitude': 14.51218,'latitude': 10.15785}\"\n - Move Rover to the specified destination with 1 Hz rate",
            "title": "Step3 How to make move"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#how-to-move-ardupilot-sitl-rover",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to move Ardupilot-SITL Rover"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#initialize",
            "text": "Please follow steps mentioned in this  link . Then you need to change the mode of your vehicle to \"GUIDED\"\nusing this  link  then you have to ARM your robot using one of the mentioned methods on this\n[link]. Then it is time to move your vehicle which is described here.",
            "title": "Initialize"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#move-your-vehicle",
            "text": "",
            "title": "Move your vehicle"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#move-your-vehicle-using-mavproxy-or-ardupilot-sitl",
            "text": "We assume that your vehicle is in \"GUIDED\" mode, if it's not please follow the links mentioned in \"Initialize\" sector on\nthis page. Then move your vehicle using this command in MAVproxy or SITL:   GUIDED lat lon alt  - Move vehicle to specified destination   Parameters of (lat, lon, alt) are the location parameters to determive the destination of the vehicle.  Then if you want to stop vehicle from moving, you need this command:   mode HOLD  - Stops the vehicle   Also there are some other modes to make vehicle move such as \"RTL\", \"MANUAL\" and etc . Please refer to this  link  for further information.",
            "title": "Move your vehicle using MAVProxy or Ardupilot-SITL"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#move-your-vehicle-using-ros-rqt",
            "text": "We assume that your vehicle is in \"GUIDED\" mode, if it's not please follow the links mentioned in \"Initialize\" sector on\nthis page. Then you need to add this plugin from rqt:  Plugins -> Topics -> Message Publisher  Then you have to add a topic with the address of \"/mavros/setpoint_raw/global\" and click \"+\" to add. After that tou need \nto change the value of position (\"latitude\", \"longitude\", \"altitude\") in order to make a destination for the vehicle.\nThen tick this topic to be published every 1 second (this duration can be changed) or even right click on the topic and \nthen choose \"Publish Selected Once\" to publish only once. Then you can see that your vehicle moves to the specified \ndestination.",
            "title": "Move your vehicle using ROS rqt:++"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step3_How_to_make_move/#change-vehicle-mode-using-ros-command-lines",
            "text": "You need to publish the destination location via this command:   rostopic pub /mavros/setpoint_raw/global mavros_msgs/GlobalPositionTarget -1 \"{'longitude': 14.51218,'latitude': 10.15785}\"  - Move Rover to the specified destination   Or if you want to specify only latitude (longitude=0):   rostopic pub /mavros/setpoint_raw/global mavros_msgs/GlobalPositionTarget -1 \"'longitude': 14.51218\"  - Move Rover to the specified destination   It is noted that \"-1\" determines that this command will be only published once. If you want to publish this message \nperiodically, you have to remove \"-1\" argument and also you can use the argument of \"-r RATE\" to specify the publish rate for this message:   rostopic pub /mavros/setpoint_raw/global mavros_msgs/GlobalPositionTarget -r 1\"{'longitude': 14.51218,'latitude': 10.15785}\"  - Move Rover to the specified destination with 1 Hz rate",
            "title": "Change vehicle mode using ROS command lines"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/",
            "text": "How to Get/Set parameters of Ardupilot-SITL Rover\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n\n\nGet/Set MAVROS Parameters\n\n\nGet/Set MAVROS Parameters using MAVProxy or Ardupilot-SITL\n\n\nIf you want to set a parameter, you can just use this command:\n\n\n\n\nparam set PARAMETER VALUE\n - Sets the new value for the parameter\n\n\n\n\nAnd if you want to set a parameter, you can just use this command:\n\n\n\n\nparam fetch PARAMETER\n - Gets the value of the parameter\n\n\n\n\nOr\n\n\n\n\nparam show PARAMETER\n - Gets the value of the parameter\n\n\n\n\nFor example, if you want to consider \"CRUISE_SPEED\" as your parameter, you can use these commands to get or set it:\n\n\n\n\n\n\nparam set CRUISE_SPEED 20\n - Sets the new value for the parameter\n\n\n\n\n\n\nparam fetch CRUISE_SPEED\n - Gets the value of the parameter\n\n\n\n\n\n\nOr\n\n\n\n\nparam show CRUISE_SPEED\n - Gets the value of the parameter\n\n\n\n\nGet/Set MAVROS Parameters using ROS rqt:\n\n\nAt first you need to add two plugin from rqt:\n\n\nPlugins -> Services -> Service Caller\n\n\n\nIf you want to set a parameter, then in \"Service Caller\" side, you have to select \n\"/mavros/param/set\"\n and then in the \nfield of \"param_id\", you can enter your name of parameter and then in the field of \"integer\" or \"real\" you can set a new\nvalue for that parameter. Then click on \"call\" button to send this message. The example result for parameter \n\"CRUISE_SPEED\" should be as follow:\n\n\n\n\nAs you can see the output constitutes a \"success\" field which is in bool type (False/True) and indicates that this \nprocess was successfully done or not. Also the new value of this parameter will be shown on this screen as you see.\n\n\nIt is noted that there is not any differences between \"integer\" and \"real\" when your value is in integer format.\n\n\nIf you want to set a parameter, then in \"Service Caller\" side, you have to select \n\"/mavros/param/get\"\n and then in the \nfield of \"param_id\", you can enter your name of parameter and then in the field of \"integer\" or \"real\" you can set a new\nvalue for that parameter. Then click on \"call\" button to send this message. The example result for parameter \n\"CRUISE_SPEED\" should be as follow:\n\n\n\n\nAs you can see the output constitutes a \"success\" field which is in bool type (False/True) and indicates that this \nprocess was successfully done or not. Also the new value of this parameter will be shown on this screen as you see.\n\n\nChange vehicle mode using ROS command lines\n\n\nIf you want to set a parameter value you need to call a ros service in order to do that. Just follow these commands:\n\n\n\n\nrosservice info /mavros/param/set\n - To see the details of this service\n\n\n\n\nThis command gives you this result:\n\n\nNode: /mavros\nURI: rosrpc://ubuntu:58491\nType: mavros_msgs/ParamSet\nArgs: param_id value\n\n\n\n\"mavros_msgs/ParamSet\" is the type of this service srv file and \"Args\" are our input arguments, but we have to know their\n types, so that we type this command:\n\n\n\n\nrossrv show mavros_msgs/ParamSet\n - Getting details of the mentioned srv file\n\n\n\n\nThis will result as below:\n\n\nstring param_id\nmavros_msgs/ParamValue value\n  int64 integer\n  float64 real\n---\nbool success\nmavros_msgs/ParamValue value\n  int64 integer\n  float64 real\n\n\n\nIn this case, \"param_id\" is the name of parameter needs to being configured and its type is \"string\". Also \"integer\" and \n\"real\" are the fields describing the value of this parameter.\n\n\nFor setting the parameter with the new value, you can rus this command:\n\n\n\n\nrosservice call /mavros/param/set \"{'param_id':'PARAM', 'value':[INTEGER_VALUE, REAL_VALUE]}\"\n - Changes the value of parameter\n\n\n\n\nFor example for the parameter of \"CRUISE_SPEED\":\n\n\n\n\nrosservice call /mavros/param/set \"{'param_id':'CRUISE_SPEED', 'value':[20, 0]}\"\n - Changes the value of parameter\n\n\n\n\nAnd if you want to get the value of a parameter:\n\n\n\n\nrosservice call /mavros/param/get \"{'param_id':'PARAM'}\"\n - Change vehicle mode to \"GUIDED\"\n\n\n\n\nFor example for the parameter of \"CRUISE_SPEED\":\n\n\n\n\nrosservice call /mavros/param/get \"{'param_id':'CRUISE_SPEED'}\"\n- Gets the variable of the parameter\n\n\n\n\nChange vehicle mode using rosun commands\n\n\n\n\n\n\nrosrun mavros mavparam set PARAM VALUE\n - Changes the value of PARAM to VALUE\n\n\n\n\n\n\nrosrun mavros mavparam get PARAM\n - Returns the value of PARAM",
            "title": "Step4 How to set and get parameters"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#how-to-getset-parameters-of-ardupilot-sitl-rover",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to Get/Set parameters of Ardupilot-SITL Rover"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#initialize",
            "text": "Please follow steps mentioned in this  link",
            "title": "Initialize"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#getset-mavros-parameters",
            "text": "",
            "title": "Get/Set MAVROS Parameters"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#getset-mavros-parameters-using-mavproxy-or-ardupilot-sitl",
            "text": "If you want to set a parameter, you can just use this command:   param set PARAMETER VALUE  - Sets the new value for the parameter   And if you want to set a parameter, you can just use this command:   param fetch PARAMETER  - Gets the value of the parameter   Or   param show PARAMETER  - Gets the value of the parameter   For example, if you want to consider \"CRUISE_SPEED\" as your parameter, you can use these commands to get or set it:    param set CRUISE_SPEED 20  - Sets the new value for the parameter    param fetch CRUISE_SPEED  - Gets the value of the parameter    Or   param show CRUISE_SPEED  - Gets the value of the parameter",
            "title": "Get/Set MAVROS Parameters using MAVProxy or Ardupilot-SITL"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#getset-mavros-parameters-using-ros-rqt",
            "text": "At first you need to add two plugin from rqt:  Plugins -> Services -> Service Caller  If you want to set a parameter, then in \"Service Caller\" side, you have to select  \"/mavros/param/set\"  and then in the \nfield of \"param_id\", you can enter your name of parameter and then in the field of \"integer\" or \"real\" you can set a new\nvalue for that parameter. Then click on \"call\" button to send this message. The example result for parameter \n\"CRUISE_SPEED\" should be as follow:   As you can see the output constitutes a \"success\" field which is in bool type (False/True) and indicates that this \nprocess was successfully done or not. Also the new value of this parameter will be shown on this screen as you see.  It is noted that there is not any differences between \"integer\" and \"real\" when your value is in integer format.  If you want to set a parameter, then in \"Service Caller\" side, you have to select  \"/mavros/param/get\"  and then in the \nfield of \"param_id\", you can enter your name of parameter and then in the field of \"integer\" or \"real\" you can set a new\nvalue for that parameter. Then click on \"call\" button to send this message. The example result for parameter \n\"CRUISE_SPEED\" should be as follow:   As you can see the output constitutes a \"success\" field which is in bool type (False/True) and indicates that this \nprocess was successfully done or not. Also the new value of this parameter will be shown on this screen as you see.",
            "title": "Get/Set MAVROS Parameters using ROS rqt:"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#change-vehicle-mode-using-ros-command-lines",
            "text": "If you want to set a parameter value you need to call a ros service in order to do that. Just follow these commands:   rosservice info /mavros/param/set  - To see the details of this service   This command gives you this result:  Node: /mavros\nURI: rosrpc://ubuntu:58491\nType: mavros_msgs/ParamSet\nArgs: param_id value  \"mavros_msgs/ParamSet\" is the type of this service srv file and \"Args\" are our input arguments, but we have to know their\n types, so that we type this command:   rossrv show mavros_msgs/ParamSet  - Getting details of the mentioned srv file   This will result as below:  string param_id\nmavros_msgs/ParamValue value\n  int64 integer\n  float64 real\n---\nbool success\nmavros_msgs/ParamValue value\n  int64 integer\n  float64 real  In this case, \"param_id\" is the name of parameter needs to being configured and its type is \"string\". Also \"integer\" and \n\"real\" are the fields describing the value of this parameter.  For setting the parameter with the new value, you can rus this command:   rosservice call /mavros/param/set \"{'param_id':'PARAM', 'value':[INTEGER_VALUE, REAL_VALUE]}\"  - Changes the value of parameter   For example for the parameter of \"CRUISE_SPEED\":   rosservice call /mavros/param/set \"{'param_id':'CRUISE_SPEED', 'value':[20, 0]}\"  - Changes the value of parameter   And if you want to get the value of a parameter:   rosservice call /mavros/param/get \"{'param_id':'PARAM'}\"  - Change vehicle mode to \"GUIDED\"   For example for the parameter of \"CRUISE_SPEED\":   rosservice call /mavros/param/get \"{'param_id':'CRUISE_SPEED'}\" - Gets the variable of the parameter",
            "title": "Change vehicle mode using ROS command lines"
        },
        {
            "location": "/Chapter1_ArduRover_with_CLI/Step4_How_to_set_and_get_parameters/#change-vehicle-mode-using-rosun-commands",
            "text": "rosrun mavros mavparam set PARAM VALUE  - Changes the value of PARAM to VALUE    rosrun mavros mavparam get PARAM  - Returns the value of PARAM",
            "title": "Change vehicle mode using rosun commands"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step1_Drive_rover/",
            "text": "How to Drive Ardupilot-SITL Rover\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nResource Github Page:\n \ngithub.com/masoudir/mavros_python_examples\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n\n\nRequirements\n\n\nYou just need to clone \nmavros_python_examples\n using this \ncommand:\n\n\ngit clone https://www.github.com/masoudir/mavros_python_examples\ncd mavros_python_examples\n\n\n\nOr you can easily install this package via pip:\n\n\npip3 install mavros_python_examples\n\n\n\nHow to use:\n\n\n\"mavros_python_examples\" includes a test file showing you the easiest way to drive rover using this package. To access \nthis file please refer to \"\n/test/rover.py\" or you if you have not cloned this project, \nsimply you can download this code via this command:\n\n\nwget https://github.com/masoudir/mavros_tutorial/test/rover.py\n\n\n\nThe contents of this files is shown below:\n\n\n****\n\n\n\nIn order to drive your Rover and make it move, you have to follow the instructions \nhere\n, then just run \nthis command:\n\n\n\n\n\n\npython3 test/rover.py\n - If you have cloned this package\n\n\n\n\n\n\npython3 rover.py\n - If you have installed this package via pip3\n\n\n\n\n\n\nYou can see that the mode of your vehicle changes to \"GUIDED\" and then this robot will be ARMED and then moves to a \nspecific point.\n\n\nFor learning more about the details of this package, refer to this \nlink",
            "title": "Step1 Drive rover"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step1_Drive_rover/#how-to-drive-ardupilot-sitl-rover",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial  Resource Github Page:   github.com/masoudir/mavros_python_examples",
            "title": "How to Drive Ardupilot-SITL Rover"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step1_Drive_rover/#initialize",
            "text": "Please follow steps mentioned in this  link",
            "title": "Initialize"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step1_Drive_rover/#requirements",
            "text": "You just need to clone  mavros_python_examples  using this \ncommand:  git clone https://www.github.com/masoudir/mavros_python_examples\ncd mavros_python_examples  Or you can easily install this package via pip:  pip3 install mavros_python_examples",
            "title": "Requirements"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step1_Drive_rover/#how-to-use",
            "text": "\"mavros_python_examples\" includes a test file showing you the easiest way to drive rover using this package. To access \nthis file please refer to \" /test/rover.py\" or you if you have not cloned this project, \nsimply you can download this code via this command:  wget https://github.com/masoudir/mavros_tutorial/test/rover.py  The contents of this files is shown below:  ****  In order to drive your Rover and make it move, you have to follow the instructions  here , then just run \nthis command:    python3 test/rover.py  - If you have cloned this package    python3 rover.py  - If you have installed this package via pip3    You can see that the mode of your vehicle changes to \"GUIDED\" and then this robot will be ARMED and then moves to a \nspecific point.  For learning more about the details of this package, refer to this  link",
            "title": "How to use:"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step2_Detials/",
            "text": "Details of \"mavros_python_examples\"\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nIntroduction\n\n\nThis package constitutes of four different python classes to make an easy way to work with Ardupilot vehicles. These \nclasses are described here.\n\n\nExplaining details\n\n\nDefining a class for TOPICS and SERVICES\n\n\nAt first, we have created a class named \"TopicService\" as below to define TOPICS and SERVICES more easily: \n\n\nclass TopicService:\ndef __init__(self, name: str, classType):\n    self.__name = name\n    self.__classType = classType\n    self.__data = None\n\ndef set_data(self, data):\n    self.__data = data\n\ndef get_data(self):\n    return self.__data\n\ndef get_type(self):\n    return self.__classType\n\ndef get_name(self):\n    return self.__name\n\n\n\nAs you see, in this class three parameters has been defined: \n\n\n\n\n\n\n\"name\" is pointing to the name of TOPIC or SERVICE, \n\n\n\n\n\n\n\"classType\" is pointing at the type of class used\n\n\n\n\n\n\n\"data\" is pointing to the contents of this TOPIC or SERVICE\n\n\n\n\n\n\nDefining a class for handling ROS topics and services\n\n\nThen we have defined the second class named \"RosHandler\" for handling TOPICS and SERVICES more easily in ROS environment.\nThe content of this class is as below:\n\n\nclass RosHandler:\ndef __init__(self):\n    self.rate = 1\n    self.connected = False\n\ndef connect(self, node: str, rate: int):\n    rospy.init_node(node, anonymous=True)\n    self.rate = rospy.Rate(rate)\n    self.connected = True\n    rospy.loginfo(\"Rospy is up ...\")\n    rospy.spin()\n\ndef disconnect(self):\n    if self.connected:\n        rospy.loginfo(\"shutting down rospy ...\")\n        rospy.signal_shutdown(\"disconnect\")\n        self.connected = False\n\n@staticmethod\ndef topic_publisher(topic: TopicService):\n    pub = rospy.Publisher(topic.get_name(), topic.get_type(), queue_size=10)\n    pub.publish(topic.get_data())\n    print(\"edfgedge\")\n\n@staticmethod\ndef topic_subscriber(topic: TopicService):\n    rospy.Subscriber(topic.get_name(), topic.get_type(), topic.set_data)\n\n@staticmethod\ndef service_caller(service: TopicService, timeout=30):\n    try:\n        srv = service.get_name()\n        typ = service.get_type()\n        data = service.get_data()\n\n        rospy.loginfo(\"waiting for ROS service:\" + srv)\n        rospy.wait_for_service(srv, timeout=timeout)\n        rospy.loginfo(\"ROS service is up:\" + srv)\n        call_srv = rospy.ServiceProxy(srv, typ)\n        return call_srv(data)\n    except rospy.ROSException as e:\n        print(\"ROS ERROR:\", e)\n    except rospy.ROSInternalException as e:\n        print(\"ROS ERROR:\", e)\n    except KeyError as e:\n        print(\"ERROR:\", e)\n    return None\n\n\n\nBecareful to execute \"topic_subscriber()\" function before connecting to the vehicle in MAVROS. This function creates and \nevent handler for receiving data from ros.\n\n\nThen you can connect to your vehicle using \"connect()\" function. This takes two arguments \"name\" and \"rate\", which are \nthe name of the node in ROS established by this code and the speed of receiving data from TOPICS in ROS respectively.\n\n\nIt is noted that the actual rate of receiving data from each topic is directly related to the rater defined in that topic.\nThis means that if a specific topic has been established on the rate of 40 Hz, you can update its data in the rate of 40 Hz\ndespite the rate you have been used on the function of \"connect()\".\n\n\nYou can publish your topics via \"topic_publisher()\" function and also you can send you service commands via \"service_caller\"\nfunction.\n\n\nDefining a class for using Rover functionality\n\n\nFor using Rover vehicle, we need to define its TOPICS and SERVICES and define the rules on how to use them. These are \naccomplished on this class as below:\n\n\nclass RoverHandler(RosHandler):\ndef __init__(self):\n    super().__init__()\n    self.armed = False\n    self.mode = \"\"\n\n    self.TOPIC_STATE = TopicService(\"/mavros/state\", mavros_msgs.msg.State)\n    self.SERVICE_ARM = TopicService(\"/mavros/cmd/arming\", mavros_msgs.srv.CommandBool)\n    self.SERVICE_SET_MODE = TopicService(\"/mavros/set_mode\", mavros_msgs.srv.SetMode)\n    self.SERVICE_SET_PARAM = TopicService(\"/mavros/param/set\", mavros_msgs.srv.ParamSet)\n    self.SERVICE_GET_PARAM = TopicService(\"/mavros/param/get\", mavros_msgs.srv.ParamGet)\n    self.TOPIC_SET_POSE_GLOBAL = TopicService('/mavros/setpoint_raw/global', mavros_msgs.msg.GlobalPositionTarget)\n\n    self.thread_param_updater = threading.Timer(0, self.update_parameters_from_topic)\n    self.thread_param_updater.daemon = True\n    self.thread_param_updater.start()\n\ndef enable_topics_for_read(self):\n    self.topic_subscriber(self.TOPIC_STATE)\n\ndef arm(self, status: bool):\n    data = mavros_msgs.srv.CommandBoolRequest()\n    data.value = status\n    self.SERVICE_ARM.set_data(data)\n    result = self.service_caller(self.SERVICE_ARM, timeout=30)\n    return result.success, result.result\n\ndef change_mode(self, mode: str):\n    data = mavros_msgs.srv.SetModeRequest()\n    data.custom_mode = mode\n    self.SERVICE_SET_MODE.set_data(data)\n    result = self.service_caller(self.SERVICE_SET_MODE, timeout=30)\n    return result.mode_sent\n\ndef move(self, lat: float, lon: float, alt: float):\n    data = mavros_msgs.msg.GlobalPositionTarget()\n    data.latitude = lat\n    data.longitude = lon\n    data.altitude = alt\n    self.TOPIC_SET_POSE_GLOBAL.set_data(data)\n    self.topic_publisher(topic=self.TOPIC_SET_POSE_GLOBAL)\n\ndef get_param(self, param: str):\n    data = mavros_msgs.srv.ParamGetRequest()\n    data.param_id = param\n    self.SERVICE_GET_PARAM.set_data(data)\n    result = self.service_caller(self.SERVICE_GET_PARAM, timeout=30)\n    return result.success, result.value.integer, result.value.real\n\ndef set_param(self, param: str, value_integer: int, value_real: float):\n    data = mavros_msgs.srv.ParamSetRequest()\n    data.param_id = param\n    data.value.integer = value_integer\n    data.value.real = value_real\n    self.SERVICE_SET_PARAM.set_data(data)\n    result = self.service_caller(self.SERVICE_SET_PARAM, timeout=30)\n    return result.success, result.value.integer, result.value.real\n\ndef update_parameters_from_topic(self):\n    while True:\n        if self.connected:\n            data = self.TOPIC_STATE.get_data()\n            self.armed = data.armed\n            self.mode = data.mode\n\n\n\nAs you see, there are some TOPICS and SERVICES defined using the class of \"TopicService\":\n\n\n\n\n\n\nTopic \"/mavros/state\" for reading the total status of the vehicle which its class type is \"mavros_msgs.msg.State\" in python\n\n\n\n\n\n\nTopic \"/mavros/setpoint_raw/global\" for publishing the destination location of vehicle to move and its class type is \"mavros_msgs.msg.GlobalPositionTarget\" in python\n\n\n\n\n\n\nService \"/mavros/cmd/arming\" for arming the vehicle which its class type is \"mavros_msgs.srv.CommandBool\" in python\n\n\n\n\n\n\nService \"/mavros/set_mode\" for changing the vehicle mode which its class type is \"mavros_msgs.srv.SetMode\" in python\n\n\n\n\n\n\nService \"/mavros/param/set\" for setting the parameters of the vehicle which its class type is \"mavros_msgs.srv.ParamSet\" in python\n\n\n\n\n\n\nService \"/mavros/param/get\" for getting the parameters of the vehicle which its class type is \"mavros_msgs.srv.ParamGet\" in python",
            "title": "Step2 Detials"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step2_Detials/#details-of-mavros_python_examples",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "Details of \"mavros_python_examples\""
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step2_Detials/#introduction",
            "text": "This package constitutes of four different python classes to make an easy way to work with Ardupilot vehicles. These \nclasses are described here.",
            "title": "Introduction"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step2_Detials/#explaining-details",
            "text": "",
            "title": "Explaining details"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step2_Detials/#defining-a-class-for-topics-and-services",
            "text": "At first, we have created a class named \"TopicService\" as below to define TOPICS and SERVICES more easily:   class TopicService:\ndef __init__(self, name: str, classType):\n    self.__name = name\n    self.__classType = classType\n    self.__data = None\n\ndef set_data(self, data):\n    self.__data = data\n\ndef get_data(self):\n    return self.__data\n\ndef get_type(self):\n    return self.__classType\n\ndef get_name(self):\n    return self.__name  As you see, in this class three parameters has been defined:     \"name\" is pointing to the name of TOPIC or SERVICE,     \"classType\" is pointing at the type of class used    \"data\" is pointing to the contents of this TOPIC or SERVICE",
            "title": "Defining a class for TOPICS and SERVICES"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step2_Detials/#defining-a-class-for-handling-ros-topics-and-services",
            "text": "Then we have defined the second class named \"RosHandler\" for handling TOPICS and SERVICES more easily in ROS environment.\nThe content of this class is as below:  class RosHandler:\ndef __init__(self):\n    self.rate = 1\n    self.connected = False\n\ndef connect(self, node: str, rate: int):\n    rospy.init_node(node, anonymous=True)\n    self.rate = rospy.Rate(rate)\n    self.connected = True\n    rospy.loginfo(\"Rospy is up ...\")\n    rospy.spin()\n\ndef disconnect(self):\n    if self.connected:\n        rospy.loginfo(\"shutting down rospy ...\")\n        rospy.signal_shutdown(\"disconnect\")\n        self.connected = False\n\n@staticmethod\ndef topic_publisher(topic: TopicService):\n    pub = rospy.Publisher(topic.get_name(), topic.get_type(), queue_size=10)\n    pub.publish(topic.get_data())\n    print(\"edfgedge\")\n\n@staticmethod\ndef topic_subscriber(topic: TopicService):\n    rospy.Subscriber(topic.get_name(), topic.get_type(), topic.set_data)\n\n@staticmethod\ndef service_caller(service: TopicService, timeout=30):\n    try:\n        srv = service.get_name()\n        typ = service.get_type()\n        data = service.get_data()\n\n        rospy.loginfo(\"waiting for ROS service:\" + srv)\n        rospy.wait_for_service(srv, timeout=timeout)\n        rospy.loginfo(\"ROS service is up:\" + srv)\n        call_srv = rospy.ServiceProxy(srv, typ)\n        return call_srv(data)\n    except rospy.ROSException as e:\n        print(\"ROS ERROR:\", e)\n    except rospy.ROSInternalException as e:\n        print(\"ROS ERROR:\", e)\n    except KeyError as e:\n        print(\"ERROR:\", e)\n    return None  Becareful to execute \"topic_subscriber()\" function before connecting to the vehicle in MAVROS. This function creates and \nevent handler for receiving data from ros.  Then you can connect to your vehicle using \"connect()\" function. This takes two arguments \"name\" and \"rate\", which are \nthe name of the node in ROS established by this code and the speed of receiving data from TOPICS in ROS respectively.  It is noted that the actual rate of receiving data from each topic is directly related to the rater defined in that topic.\nThis means that if a specific topic has been established on the rate of 40 Hz, you can update its data in the rate of 40 Hz\ndespite the rate you have been used on the function of \"connect()\".  You can publish your topics via \"topic_publisher()\" function and also you can send you service commands via \"service_caller\"\nfunction.",
            "title": "Defining a class for handling ROS topics and services"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step2_Detials/#defining-a-class-for-using-rover-functionality",
            "text": "For using Rover vehicle, we need to define its TOPICS and SERVICES and define the rules on how to use them. These are \naccomplished on this class as below:  class RoverHandler(RosHandler):\ndef __init__(self):\n    super().__init__()\n    self.armed = False\n    self.mode = \"\"\n\n    self.TOPIC_STATE = TopicService(\"/mavros/state\", mavros_msgs.msg.State)\n    self.SERVICE_ARM = TopicService(\"/mavros/cmd/arming\", mavros_msgs.srv.CommandBool)\n    self.SERVICE_SET_MODE = TopicService(\"/mavros/set_mode\", mavros_msgs.srv.SetMode)\n    self.SERVICE_SET_PARAM = TopicService(\"/mavros/param/set\", mavros_msgs.srv.ParamSet)\n    self.SERVICE_GET_PARAM = TopicService(\"/mavros/param/get\", mavros_msgs.srv.ParamGet)\n    self.TOPIC_SET_POSE_GLOBAL = TopicService('/mavros/setpoint_raw/global', mavros_msgs.msg.GlobalPositionTarget)\n\n    self.thread_param_updater = threading.Timer(0, self.update_parameters_from_topic)\n    self.thread_param_updater.daemon = True\n    self.thread_param_updater.start()\n\ndef enable_topics_for_read(self):\n    self.topic_subscriber(self.TOPIC_STATE)\n\ndef arm(self, status: bool):\n    data = mavros_msgs.srv.CommandBoolRequest()\n    data.value = status\n    self.SERVICE_ARM.set_data(data)\n    result = self.service_caller(self.SERVICE_ARM, timeout=30)\n    return result.success, result.result\n\ndef change_mode(self, mode: str):\n    data = mavros_msgs.srv.SetModeRequest()\n    data.custom_mode = mode\n    self.SERVICE_SET_MODE.set_data(data)\n    result = self.service_caller(self.SERVICE_SET_MODE, timeout=30)\n    return result.mode_sent\n\ndef move(self, lat: float, lon: float, alt: float):\n    data = mavros_msgs.msg.GlobalPositionTarget()\n    data.latitude = lat\n    data.longitude = lon\n    data.altitude = alt\n    self.TOPIC_SET_POSE_GLOBAL.set_data(data)\n    self.topic_publisher(topic=self.TOPIC_SET_POSE_GLOBAL)\n\ndef get_param(self, param: str):\n    data = mavros_msgs.srv.ParamGetRequest()\n    data.param_id = param\n    self.SERVICE_GET_PARAM.set_data(data)\n    result = self.service_caller(self.SERVICE_GET_PARAM, timeout=30)\n    return result.success, result.value.integer, result.value.real\n\ndef set_param(self, param: str, value_integer: int, value_real: float):\n    data = mavros_msgs.srv.ParamSetRequest()\n    data.param_id = param\n    data.value.integer = value_integer\n    data.value.real = value_real\n    self.SERVICE_SET_PARAM.set_data(data)\n    result = self.service_caller(self.SERVICE_SET_PARAM, timeout=30)\n    return result.success, result.value.integer, result.value.real\n\ndef update_parameters_from_topic(self):\n    while True:\n        if self.connected:\n            data = self.TOPIC_STATE.get_data()\n            self.armed = data.armed\n            self.mode = data.mode  As you see, there are some TOPICS and SERVICES defined using the class of \"TopicService\":    Topic \"/mavros/state\" for reading the total status of the vehicle which its class type is \"mavros_msgs.msg.State\" in python    Topic \"/mavros/setpoint_raw/global\" for publishing the destination location of vehicle to move and its class type is \"mavros_msgs.msg.GlobalPositionTarget\" in python    Service \"/mavros/cmd/arming\" for arming the vehicle which its class type is \"mavros_msgs.srv.CommandBool\" in python    Service \"/mavros/set_mode\" for changing the vehicle mode which its class type is \"mavros_msgs.srv.SetMode\" in python    Service \"/mavros/param/set\" for setting the parameters of the vehicle which its class type is \"mavros_msgs.srv.ParamSet\" in python    Service \"/mavros/param/get\" for getting the parameters of the vehicle which its class type is \"mavros_msgs.srv.ParamGet\" in python",
            "title": "Defining a class for using Rover functionality"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step3_How_to_use/",
            "text": "How to Drive Ardupilot-SITL Rover\n\n\nAuthor:\n Masoud Iranmehr\n\n\nGithub Page:\n \ngithub.com/masoudir/mavros_tutorial\n\n\nInitialize\n\n\nPlease follow steps mentioned in this \nlink\n\n\nRequirements\n\n\nimport threading\nimport time\nfrom mavHandler.roverHandler import *\n\n\nclass MyRoverHandler(RoverHandler):\n    def __init__(self):\n        super().__init__()\n\n        self.user_thread = threading.Timer(0, self.user)\n        self.user_thread.daemon = True\n        self.user_thread.start()\n\n    def user(self):\n        while True:\n            time.sleep(1)\n            print(\"arm:\", self.armed, \"mode:\", self.mode)\n            print(\"set param:\", self.set_param(\"CRUISE_SPEED\", 2, 0))\n            if self.connected:\n                print(\"get param:\", self.get_param(\"CRUISE_SPEED\"))\n                print(\"set param:\", self.set_param(\"CRUISE_SPEED\", 10, 0))\n                self.change_mode(MODE_GUIDED)\n                self.arm(True)\n                self.move(50.15189, 10.484885, 0)\n\n\n\nif __name__ == \"__main__\":\n    v = MyRoverHandler()\n    v.enable_topics_for_read()\n    v.connect(\"node1\", rate=10)\n\n\n\nIn order to run your code please follow the instructions mentioned at this \nlink\n to introduce ROS \nfunctions to this code (Becareful to source the path of ROS and MAVROS on the current terminal in order to use the code).\nThen if you download this project with git, you can run your code.\n\n\nThis will create a node with the name of \"node1\" and then it will connect to the ArduRover vehicle you brought up via the former \nstep, then it will set the value of \"CRUISE_SPEED\" parameter to 2 and then it will change the vehicle\nmode to \"GUIDED\". Then it will ARM the vehicle and then force the vehicle to move to the destination of \n{\"lat\":50.15189, \"lon\":10.484885}.",
            "title": "Step3 How to use"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step3_How_to_use/#how-to-drive-ardupilot-sitl-rover",
            "text": "Author:  Masoud Iranmehr  Github Page:   github.com/masoudir/mavros_tutorial",
            "title": "How to Drive Ardupilot-SITL Rover"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step3_How_to_use/#initialize",
            "text": "Please follow steps mentioned in this  link",
            "title": "Initialize"
        },
        {
            "location": "/Chapter2_ArduRover_with_Python/Step3_How_to_use/#requirements",
            "text": "import threading\nimport time\nfrom mavHandler.roverHandler import *\n\n\nclass MyRoverHandler(RoverHandler):\n    def __init__(self):\n        super().__init__()\n\n        self.user_thread = threading.Timer(0, self.user)\n        self.user_thread.daemon = True\n        self.user_thread.start()\n\n    def user(self):\n        while True:\n            time.sleep(1)\n            print(\"arm:\", self.armed, \"mode:\", self.mode)\n            print(\"set param:\", self.set_param(\"CRUISE_SPEED\", 2, 0))\n            if self.connected:\n                print(\"get param:\", self.get_param(\"CRUISE_SPEED\"))\n                print(\"set param:\", self.set_param(\"CRUISE_SPEED\", 10, 0))\n                self.change_mode(MODE_GUIDED)\n                self.arm(True)\n                self.move(50.15189, 10.484885, 0)\n\n\n\nif __name__ == \"__main__\":\n    v = MyRoverHandler()\n    v.enable_topics_for_read()\n    v.connect(\"node1\", rate=10)  In order to run your code please follow the instructions mentioned at this  link  to introduce ROS \nfunctions to this code (Becareful to source the path of ROS and MAVROS on the current terminal in order to use the code).\nThen if you download this project with git, you can run your code.  This will create a node with the name of \"node1\" and then it will connect to the ArduRover vehicle you brought up via the former \nstep, then it will set the value of \"CRUISE_SPEED\" parameter to 2 and then it will change the vehicle\nmode to \"GUIDED\". Then it will ARM the vehicle and then force the vehicle to move to the destination of \n{\"lat\":50.15189, \"lon\":10.484885}.",
            "title": "Requirements"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/Step1_Drive_rover/",
            "text": "",
            "title": "Step1 Drive rover"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/Step2_Details/",
            "text": "",
            "title": "Step2 Details"
        },
        {
            "location": "/Chapter3_ArduRover_with_C++/Step3_How_to_use/",
            "text": "",
            "title": "Step3 How to use"
        }
    ]
}